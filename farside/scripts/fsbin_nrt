#!/bin/csh -f
# script to update binnings of HMI NRT Dopplergrams into a 200*200 grid
#   for GONG farside processing
# This script is written to be run as a cron job under UID rick, although
#   it could probably be run under other UID's as well
# It can be run at any frequency, and without arguments will add records
#   to the output series from beyond the last current record up to the last
#   current record in the input series. To fill in records for an earlier
#   set of days, the first (and last) day can be specified as arguments

setenv JSOC_DBUSER `whoami`

# base naming convention for I/O series and logs
set NMSP = hmi
set SUFX = _nrt
set TYPE = $NMSP.fsbin$SUFX

# input and output series
set ISER = $NMSP.V_45s$SUFX
set OSER = $NMSP.fsVbinned$SUFX

# auxiliary files
set HOSTNAME = `hostname`
set HOSTID = `basename $HOSTNAME .Stanford.EDU`
set PROCID = $HOSTID\_$$
set TMPFSLOC = ~rick/hmi/tmpfs
set TMPARSE = ~rick/bin/tmplocs
set ALTDIR = ~rick/hmi
if (-x $TMPARSE) then
  set XXLOCS = (`$TMPARSE $TMPFSLOC $ALTDIR`)
  set TEMP = $XXLOCS[1]
else
  set TEMP = /tmp
endif
set QRES = $TEMP/qres
if (!(-d $QRES)) mkdir $QRES
set MSGS = $TEMP/msgs
set NOTE = ~rick/rings/notify
set MMSG = $MSGS/msg.$PROCID

set JPLAT = linux_x86_64
setenv SGE_ROOT /SGE
set path = (~rick/bin/_linux4 ~rick/bin/$JPLAT ~rick/jsoc/bin/$JPLAT $SGE_ROOT/bin/lx24-amd64 $path)
setenv KMP_BLOCKTIME 10

set REBIN = "drms_rebin offset= -OBS_VR"

set SCRIPT = $TEMP/runfsbin

# set up logging, notification
set SUBJ = "HMI NRT farside binning for GONG pipeline"

if ($#argv > 0) then
  @ YYMMDD0 = `echo $1| sed  -e "s/^0*//"`
  if ($YYMMDD0 < 500000) @ YYMMDD0 += 20000000
  if ($YYMMDD0 < 1000000) @ YYMMDD0 += 19000000
  @ YMD0 = `echo $YYMMDD0 | sed  -e "s/^0*//"`
  @ YYMMDD1 = $YYMMDD0
  @ YMD1 = $YMD0
  if ($#argv > 1) then
    @ YYMMDD1 = `echo $2 | sed  -e "s/^0*//"`
    if ($YYMMDD1 < 500000) @ YYMMDD1 += 20000000
    if ($YYMMDD1 < 1000000) @ YYMMDD1 += 19000000
    @ YMD1 = `echo $YYMMDD1 | sed  -e "s/^0*//"`
  endif
  @ HMS0 = 000000
else
# get time of last record in output series: start from there
  @ LASTREC = `show_info -qr ds= $OSER'[#$]'`
  if (!($LASTREC)) then
    echo Series $OSER is unpopulated, need to initialize with command
    echo "usage: $0 YYMMDD [YYMMDD]"
    exit
  endif
  set LASTDT = `show_info -q ds= $OSER'[$]' key= T_REC`
  set DATE = `echo $LASTDT | awk -F_ '{print $1}'`
  @ YR = `echo $DATE | awk -F. '{print $1}' | sed  -e "s/^0*//"`
  if ($YR % 4) then
    set MOLEN = (31 28 31 30 31 30 31 31 30 31 30 31)
  else
    set MOLEN = (31 29 31 30 31 30 31 31 30 31 30 31)
  endif
  @ MO = `echo $DATE | awk -F. '{print $2}' | sed  -e "s/^0*//"`
  @ DA = `echo $DATE | awk -F. '{print $3}' | sed  -e "s/^0*//"`
  set TIME = `echo $LASTDT | awk -F_ '{print $2}'`
  @ HR = `echo $TIME | awk -F: '{print $1}' | sed  -e "s/^0*//"`
  @ MN = `echo $TIME | awk -F: '{print $2}' | sed  -e "s/^0*//"`
  @ SC = `echo $TIME | awk -F: '{print $3}' | sed  -e "s/^0*//"`
  @ SC += 45
  if ($SC >= 60) then
    @ SC -= 60
    @ MN++
    if ($MN >= 60) then
      @ MN -= 60
      @ HR++
      if ($HR >= 24) then
	@ HR -= 24
	@ DA++
	if ($DA > $MOLEN[$MO]) then
	  @ DA = 1
	  @ MO++
	  if ($MO > 12) then
	    @ MO = 1
	    @ YR++
	    if ($YR % 4) then
	      set MOLEN = (31 28 31 30 31 30 31 31 30 31 30 31)
	    else
	      set MOLEN = (31 29 31 30 31 30 31 31 30 31 30 31)
	    endif
	  endif
	endif
      endif
    endif
  endif
  set YYMMDD0 = `printf %02d%02d%02d $YR $MO $DA`
  @ YMD0 = `echo $YYMMDD0 | sed  -e "s/^0*//"`
  @ HMS0 = `printf %02d%02d%02d $HR $MN $SC | sed  -e "s/^0*//"`
# get time of last record in input series: go to there
  @ LASTREC = `show_info -qr ds= $ISER'[#$]'`
  if (!($LASTREC)) then
    echo Error: Series $ISER is unpopulated
    exit
  endif
  set LASTDT = `show_info -q ds= $ISER'[$]' key= T_REC`
  set DATE = `echo $LASTDT | awk -F_ '{print $1}'`
  @ YR = `echo $DATE | awk -F. '{print $1}' | sed  -e "s/^0*//"`
  if ($YR % 4) then
    set MOLEN = (31 28 31 30 31 30 31 31 30 31 30 31)
  else
    set MOLEN = (31 29 31 30 31 30 31 31 30 31 30 31)
  endif
  @ MO = `echo $DATE | awk -F. '{print $2}' | sed  -e "s/^0*//"`
  @ DA = `echo $DATE | awk -F. '{print $3}' | sed  -e "s/^0*//"`
  set YYMMDD1 = `printf %02d%02d%02d $YR $MO $DA`
  @ YMD1 = `echo $YYMMDD1 | sed  -e "s/^0*//"`
endif

if ($YMD0 > $YMD1) then
  exit
else if ($YMD0 < $YMD1) then
  echo processing data for $YYMMDD0 - $YYMMDD1 > $MMSG
else
  echo processing data for $YYMMDD0 > $MMSG
endif

@ YMD = $YMD0
@ YR = $YMD / 10000
if ($YR % 4) then
  set MOLEN = (31 28 31 30 31 30 31 31 30 31 30 31)
else
  set MOLEN = (31 29 31 30 31 30 31 31 30 31 30 31)
endif

@ FIRST = 1
while ($YMD <= $YMD1)
  @ YR = $YMD / 10000
  @ MO = ($YMD % 10000) / 100
  @ DA = $YMD % 100
  set DATE = $YR.`printf %02d.%02d $MO $DA`

  @ HR = 0
  set STRTS = ()
  while ($HR < 24)
    if ($FIRST) then
      @ HR0 = $HMS0 / 10000
      @ MN = ($HMS0 % 10000) / 100
      @ SC = $HMS0 / 100
      set HTIME0 = $DATE\_$HR0\:$MN\:$SC\_TAI
      @ HR1 = ($HR0 / 3)
      @ HR1 *= 3
      @ HR1 += 2
      set HTIME1 = $DATE\_$HR1\:59:15\_TAI
      @ DICT = `show_info -c ds= $ISER"[$HTIME0-$HTIME1]" | awk '{print $1}'`
      if ($DICT) then
	@ DOCT = `show_info -c ds= $OSER"[$HTIME0-$HTIME1]" | awk '{print $1}'`
	if ($DOCT < $DICT) then
	  set STRTS = ($STRTS $HTIME0-$HTIME1)
	endif
      endif
      @ FIRST = 0
      @ HR = $HR1 + 1
      if ($HR >= 24) continue
    endif
    set HTIME = $DATE\_$HR\:00_TAI
    @ DICT = `show_info -c ds= $ISER"[$HTIME/3h]" | awk '{print $1}'`
    if ($DICT) then
      @ DOCT = `show_info -c ds= $OSER"[$HTIME/3h]" | awk '{print $1}'`
      if ($DOCT < $DICT) then
	set STRTS = ($STRTS $DATE\_$HR\:00:00_TAI/3h)
      endif
    endif
    @ HR += 3
  end
  @ JOBCT = $#STRTS
  if ($JOBCT) then
# check gatekeeper for permission to proceed
    set TURN = ~rick/hmi/pikewatch
    set PIKE = ~rick/hmi/pike
    set RES = (`$TURN $PIKE`)
    @ NOGO = $RES[1]
    if ($NOGO) goto TURNOUT

    echo "#\!/bin/csh -f" > $SCRIPT
    echo 'set STRTS =  ('"$STRTS"')' >> $SCRIPT
    echo 'set START = $STRTS[$SGE_TASK_ID]' >> $SCRIPT
    echo "$REBIN \" >> $SCRIPT
    echo "  out= $OSER bin= 20 start= 48 stop= -49 \" >> $SCRIPT
    echo '  in= '$ISER'"[$START]" \' >> $SCRIPT
    echo '  copy= "QUALITY,CRLN_OBS,CRLT_OBS,CAR_ROT,OBS_VR,OBS_VN,OBS_VW,DSUN_OBS,RSUN_OBS,+"' >> $SCRIPT
    qsub -sync yes -t 1-$JOBCT -q j.q -e $QRES -o $QRES $SCRIPT >>& $MMSG
  endif

  @ DA++
  if ($DA > $MOLEN[$MO]) then
    @ DA = 1
    @ MO++
    if ($MO > 12) then
      @ MO = 1
      @ YR++
      if ($YR % 4) then
	set MOLEN = (31 28 31 30 31 30 31 31 30 31 30 31)
      else
	set MOLEN = (31 29 31 30 31 30 31 31 30 31 30 31)
      endif
    endif
  endif
  @ YMD = `printf %d%02d%02d $YR $MO $DA | sed  -e "s/^0*//"`
end

set NOTIFY = `grep ^$TYPE $NOTE | awk '{print $2}'`
if ($#NOTIFY) then
  echo $SUBJ > $MSGS/subj.$PROCID
  echo "$NOTIFY" > $MSGS/list.$PROCID
endif
exit

TURNOUT:
echo "-> Script $PROG aborted! <-" >> $MMSG
if ($NOGO < 0) then
  echo "   watcher script $TURN called with invalid argument" >> $MMSG
  echo "   or file $PIKE has invalid format" >> $MMSG
else
  @ HRCT = $NOGO / 3600
  @ NOGO -= $HRCT * 3600
  @ MNCT = $NOGO / 60
  @ NOGO -= $MNCT * 60
  echo -n "   file $PIKE contains NoGo signal for $HRCT" >> $MMSG
  echo `printf :%02d:%02d $MNCT $NOGO` >> $MMSG
  if ($#RES > 1) then
    echo "   Reason: $RES[2-]" >> $MMSG
  endif
endif

