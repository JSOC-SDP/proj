
/*
 * This file is generated by a script, do not edit.
 *
 * This documentation string was generated from
 * a C comment block within a mex program
 * by `doc2docstring.py' on Thu Jun 23 18:32:24 2011.
 */
 
static const char docstring[] =
	"region_bb: find bounding boxes for regions\n"
	"\n"
	" [bb]=region_bb(x,coord)\n"
	" * The list of bounding boxes of regions in the input map x is\n"
	" returned in bb.\n"
	" * x must be Nan, or a nonnegative integer.  Pixels in the\n"
	" range 1..Nr, where Nr is the number of regions, are treated as\n"
	" belonging to the corresponding region.\n"
	" Inputs x of 0 or NaN are treated as off-region.\n"
	" * Each bounding box row is of the form [Lm Ln Um Un] where\n"
	" L is the lower corner (in both directions) and U is the\n"
	" upper corner diagonal from L.  The \"m\" (first coordinate) and\n"
	" \"n\" coordinates are given in that order for L and U.  By\n"
	" convention, the smallest L = (0,0) and the largest U = (m-1,n-1),\n"
	" but see the coord input.\n"
	" * If no pixel in a given region numbered between 1..Nr is found,\n"
	" NaN is returned for that row's bounding box.\n"
	" * The coord input allows for some coordinate transforms.\n"
	" coord(1) is an offset, and coord(2) is a block size.  To get\n"
	" standard Matlab coordinates, use [1 1] to add coord(1)=1 to the\n"
	" edges.  This is the default: the \"conventional\" L and U are\n"
	" adjusted before output.\n"
	" * The block size is for situations where the pixels were\n"
	" averaged from a larger image.  In this case the corners are\n"
	" essentially multiplied by coord(2).  The lowest pixel in the\n"
	" L block and the highest pixel in the U block are given as the\n"
	" bounding box coordinates.\n"
	" * This is implemented as a MEX file.\n"
	"\n"
	" Inputs:\n"
	"   real x(m,n); -- 0, NaN, or 1..Nr\n"
	"   opt int coord(1) or coord(2) = [1 1];\n"
	"\n"
	" Outputs:\n"
	"   int bb(Nr,4);\n"
	"\n"
	" See Also:\n"
	"\n"
	" turmon may 2001\n"
	"\n"
	"";

/* End of generated file */

