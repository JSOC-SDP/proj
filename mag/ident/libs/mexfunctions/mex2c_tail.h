
/***************************************************************************
 * Generic include file providing customizable methods table 
 * 
 * For mex2c_lib:
 * Contains one function which 
 *
 * For mex2py:
 * This file contains one function which notifies Python about 
 * a methods table (here called mxMethods).  The table is used to interface
 * a mexFunction, declared static in the current namespace, to python's 
 * C-API using the numeric array (numpy) types.  Because any and all 
 * identifiers *not* declared static can conflict with python or each other,
 * we declare things static in this file.
 * This file has been written to be generic across multiple mex files.
 * It expects that PROGNAME is #defined to be a unique string.
 * It expects to be #included from the file containing mexFunction, because
 * mexFunction must be declared static to get around the namespace problems
 * outlined above.
 ***************************************************************************/

#ifndef _generic_mex_tail_h_
#define _generic_mex_tail_h_

/**** Hook for generic inclusion *************************************/

#ifdef MEX2C_TAIL_FILE
#include MEX2C_TAIL_FILE
#endif

/**** mex2lib: mexfile into c library ********************************/

#ifdef USING_MEX2LIB

/* utility: paste main_ plus PROGNAME into one token */
#define MAINNAME1(X) MAINNAME(X)
#define MAINNAME(X) main_ ## X

/* this is the c-library entry point */
char *
MAINNAME1(PROGNAME) (int nlhs, mxArray **plhs, int nrhs, mxArray **prhs)
{
  char *err;

  err = mxt_mexDispatcher(mexFunction, progname, 1,
			  nlhs, plhs, 
			  nrhs, (const mxArray **) prhs);
  return err;
}

#undef MAINNAME1
#undef MAINNAME

#endif /* USING_MEX2LIB */

/**** mex2py: mexfile into numpy shared object ***********************/

#ifdef USING_MEX2PY

/* Provide a constant function pointer to initialize the mxMethods table */
static PyObject *
mx_entry_proxy(PyObject *self, PyObject *args, PyObject *kw) 
{
  /* note, self is not in the argument list */
  return mx_entry(mexFunction, args, kw,
		  NARGIN_MIN,
		  NARGIN_MAX,
		  NARGOUT_MIN,
		  NARGOUT_MAX,
		  in_specs, in_names, out_names);
}

/* methods table */
static PyMethodDef mxMethods[] = {
  /* key method is mexFunction, visible to Python as lhs = modulename.main(rhs) */
  {
    "main", 
    (PyCFunction) mx_entry_proxy, 
    METH_VARARGS|METH_KEYWORDS, 
    docstring  /* autogenerated, and in Doc/PROGNAME_docstring.h */
  },
  /* other methods here as needed */
  /* ... */
  /* sentinel */
  {
    NULL, NULL, 0, NULL
  }
};

/* utility: paste init plus PROGNAME into one token */
#define INITNAME1(X) INITNAME(X)
#define INITNAME(X) init ## X

/* initialization */
void INITNAME1(PROGNAME) ()  {
  /* module name below must be consistent with shared library name */
  (void) Py_InitModule(progname, mxMethods);
  import_array();  /* Must be present for NumPy. */
}

#undef INITNAME1
#undef INITNAME

#endif /* USING_MEX2PY */

#endif /* _generic_mex_tail_h */
