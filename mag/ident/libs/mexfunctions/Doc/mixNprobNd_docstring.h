
/*
 * This file is generated by a script, do not edit.
 *
 * This documentation string was generated from
 * a C comment block within a mex program
 * by `doc2docstring.py' on Tue Oct 27 23:15:39 2009.
 */
 
static const char docstring[] =
	"mixNprobNd: gaussian mixture probability (enhanced)\n"
	"\n"
	" p = mixNprobNd(idim, odim, iperm, x1, ..., xJ, mode, m1, ..., mR)\n"
	" * Compute the probability of each feature vector in x1, ...\n"
	" assuming data is from a mixture of multivariate normal\n"
	" distributions named in m1, ...\n"
	" * If a single input array is given, this is taken to contain\n"
	" all feature vectors.  If J array inputs with the same size = S\n"
	" are given, the input is taken to be of size [S J], as if the\n"
	" given argument were equal to:\n"
	"   reshape([x1(:);...;xJ(:)], [size(x1) J])\n"
	" * The mixture models are given as R, 2d matrices encoding the\n"
	" weights, Dm-length means, and DmxDm covariance matrices\n"
	" as described below.\n"
	" * If R models are given, the probability of each feature vector\n"
	" under each mixture model is found and returned in p.\n"
	" * idim >= 0 gives the dimension of the input X along which feature\n"
	" vectors extend.  Typically idim > 0, but if model dimension Dm = 1,\n"
	" letting idim = 0 signals applying the model to each number in\n"
	" x, whether or not any dimension of x happens to be a singleton.\n"
	" * odim >= 0 gives the dimension of the output p along which the\n"
	" R-length vectors of per-model probabilities extend.\n"
	" Typically odim > 0, but odim = 0 can be used if R = 1 to\n"
	" \"squeeze\" out the 1-dimensional model index.\n"
	" * iperm is a (possibly truncated) permutation of [1:D] that allows\n"
	" features to be reordered or omitted.  iperm = [] is turned into [1:D].\n"
	" The length Dm <= D of iperm gives the dimensionality of the model\n"
	" matrices.\n"
	" * Suppose the input has sizes S(1)...S(N).  The raw FVs are of\n"
	" length S(idim) = D.  The permuted FVs are of length Dmod <= D,\n"
	" which gives the model dimensions.  For each of R models,\n"
	" prod(S(:))/D probabilities are found, forming an array with\n"
	" N-1 coordinates, idim having been removed.  The R probabilities\n"
	" are inserted into the odim'th coordinate of p, and the other\n"
	" coordinates [odim:N-1] are moved out to [odim+1:N].  In the\n"
	" case R = 1, let odim = 0 to suppress the model coordinate.\n"
	" * The mode string separates the arrays of feature vectors\n"
	" from the model matrices.  It is empty, or contains a series\n"
	" of comma-separated strings drawn from:\n"
	"   'exp'  --> probs are returned literally\n"
	"   'log'  --> log probabilities are returned\n"
	"   'var'  --> models mN use the variance/covariance matrix\n"
	"   'chol' --> models mN use the square root (cholesky factor)\n"
	" Note, 'chol' is compatible with the upper-triangular\n"
	" cholesky factor from matlab chol.\n"
	" * Completely independently, if it contains:\n"
	"  'diag-then-upper' --\n"
	"    Covariance block has diags first, then strict upper triangle, as in\n"
	"    [diag(Sigma); triu(Sigma,1)]\n"
	"    This is for backward compatibility with the original D=2 format\n"
	"    used by mixNprob2d.\n"
	"  'diag-with-upper' --\n"
	"    Covariance block has upper triangle, interleaved with diagonals\n"
	"    in the natural ordering, as in triu(Sigma)\n"
	"  'full' --\n"
	"    Covariance block contains full DxD matrix.\n"
	" One of these must be given.\n"
	" * The 2d mixture matrices follow the mixture2d format described\n"
	" in the mixture help.\n"
	" * We do not enforce that weights sum to one, but we do forbid\n"
	" negative weights.\n"
	"\n"
	" Inputs:\n"
	"   int idim\n"
	"   int odim\n"
	"   int iperm(Dmod) = [1:D]\n"
	"   real array x1\n"
	"   ...\n"
	"   real array xJ\n"
	"   string mode\n"
	"   real m1(l,k1)\n"
	"   ...\n"
	"   real mR(l,kR)\n"
	"\n"
	" Outputs:\n"
	"   real p();\n"
	"\n"
	" See Also:  mixNprob, mixNprobab\n"
	"\n"
	" implemented as a mex file\n"
	"\n"
	" turmon feb 2008 -- tested exhaustively against mixNprobab.m and\n"
	" found agreement to floating point precision.  See mixNprob_test.m\n"
	" for the randomized test harness.\n"
	"\n"
	"";

/* End of generated file */

