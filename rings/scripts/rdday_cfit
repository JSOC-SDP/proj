#!/bin/tcsh -f
# script to run a single instance of trackings plus analyses in the ring-diagram
#    synoptic series for a given time center
# This script should be run every 5 deg of Carrington rotation, i.e. about
#   9 hours for the 5-deg series, every 15 deg (27 hours) for the 15-deg
#   series, and 30 deg (54 hours) for the 30-deg series
# Bugs:
#   The Guess series override in the options file in test runs has no effect;
#	the guess table is determined earlier
#   The intermediate input series cannot be overridden by the options file in
#	continuation test runs

@ TEST = 0	# set to 1 for production in namespace hmi_test
set TW
if ("$1" =~ '-test') then
  @ TEST = 1
  set TW = test
  shift
endif

if ($#argv < 3) then
  echo "usage: $0 [-test] Size Carrington_rot Longitude [N]"
  echo "       (N to start with strip N)"
  exit
endif

@ SYSER = `echo $1 | sed -e "s/^0*//"`
@ CROT = `echo $2 | sed -e "s/^0*//"`
@ CLON = `echo $3 | sed -e "s/^0*//"`
@ RESTART = 0
while ($CLON > 360)
  @ CLON -= 360
  @ CROT--
end
while ($CLON <= 0)
  @ CLON += 360
  @ CROT++
end
set CARTIM = $CROT\:`printf %03d $CLON`

if ($#argv > 3) then
  @ RESTART = $4
  if ($RESTART < 0) @ RESTART *= -1
  if ($RESTART) @ RESTART--
endif

@ SKIPTRK = 0
@ SKIPSPC = 0
@ SKIPFIT = 0
@ SKIPINV = 0
set PROG = `basename $0`
if ($PROG !~ '*rdday*') then
  set PROG = $JOB_NAME
endif
if ($PROG =~ "*_psp") @ SKIPTRK = 1
if ($PROG =~ "*_qfit") @ SKIPSPC = 1
if ($PROG =~ "*_inv") @ SKIPFIT = 1
if ($PROG =~ "*_cfit") @ SKIPINV = 1

# modules and programs
set COVER = rdcover
set GENTG = gentargs
set LSMAI = maicalc
set TRACK = mtrack
set PSPEC = pspec3
set RFITF = rdfitf
set RFITC = rdfitc
set RVINV = rdvinv

set QUEUE = j.q

if ($TEST) then
  set TSTOPT = ~rick/hmi/rings/testoptions
  if (!(-r $TSTOPT)) then
    echo Error: unable to read file $TSTOPT for test options
    exit
  endif
# parse testoptions file for possible substitution of modules
  set NMSP = hmi_test
  grep -q "^COVER =" $TSTOPT
  if ($status == 0) set COVER = `grep "^COVER =" $TSTOPT | awk '{print $3}'`
  grep -q "^TRACK =" $TSTOPT
  if ($status == 0) set TRACK = `grep "^TRACK =" $TSTOPT | awk '{print $3}'`
  grep -q "^PSPEC =" $TSTOPT
  if ($status == 0) set PSPEC = `grep "^PSPEC =" $TSTOPT | awk '{print $3}'`
  grep -q "^RFITF =" $TSTOPT
  if ($status == 0) set RFITF = `grep "^RFITF =" $TSTOPT | awk '{print $3}'`
  grep -q "^RFITC =" $TSTOPT
  if ($status == 0) set RFITC = `grep "^RFITC =" $TSTOPT | awk '{print $3}'`
  grep -q "^RVINV =" $TSTOPT
  if ($status == 0) set RVINV = `grep "^RVINV =" $TSTOPT | awk '{print $3}'`
else
  set NMSP = hmi
endif

#  check that required scripts and programs are in path or rooted
foreach CMD ($COVER $GENTG $LSMAI $TRACK $PSPEC $RFITF $RFITC $RVINV)
  which $CMD > /dev/null
  if ($status) then
    if (!(-x $CMD)) then
      echo Error: command $CMD not in path\; script will fail
      exit
    endif
  endif
end

# add flags
set TRACK = "$TRACK -voc"
set PSPEC = "$PSPEC -v"

# select from synoptic series
set TILESS = (  05    15    30)
set LNGTHS = ( 768  2304  4608)
set SCALES = (0.04  0.04  0.08)
set SIZES =  ( 128   384   384)
set MSIZES = (5.12 15.36 30.72)
set NMAXS =  (   5    14    14)
set VMEMS =  ( 125  1500  2500)
set PLIMS =  ( 800  4000  7500)
set KLOWS =  ("  5,  3,  3,  5,  7,  7" \
              "  8,  6,  6,  6,  6,  6,  6,  7, 9,10,10,12,13,14,14" \
	      " 12,  7,  7,  6,  6,  6,  6,  6, 6, 7, 8,10,10,13,13")
set KHIGHS = (" 38, 28, 20, 15, 12,  9" \
              "120, 75, 60, 45, 60, 50, 40, 40,30,40,40,40,40,35,35" \
	      "187,160,145,100,115,110,100,100,80,80,75,60,50,60,40")
set RTRGCS =  (  21   31   61)
set RIMINS =  (0.99 0.97 0.94)
set RIMAXS =  (1.00 1.00 1.00)

@ NT = 1
while ($NT <= $#TILESS)
  set TILES = $TILESS[$NT]
  @ SYSE = `echo $TILES | sed  -e "s/^0*//"`
  if ($SYSER == $SYSE) break
  @ NT++
end
if ($NT > $#TILESS) then
  echo "usage: $0 [-test] Size Carrington_rot Longitude [N]"
  echo "       (N to start with strip N)"
  echo "       Size must be one of: $TILESS"
  exit
endif

# base naming convention for I/O series and logs
set BASE = rdV
set TILES = $TILESS[$NT]
set SUFX = _fd$TILES
set PLID = hmi$BASE

set TYPE = $NMSP.$BASE$SUFX

# parameters
@ SIZE = $SIZES[$NT]
set SCALE = $SCALES[$NT]
@ LNGTH = $LNGTHS[$NT]
set MSIZE = $MSIZES[$NT]
@ NMAX = $NMAXS[$NT]
@ VMEM = $VMEMS[$NT]
@ PLIM = $PLIMS[$NT]
set KLOW = "$KLOWS[$NT]"
set KHIGH = "$KHIGHS[$NT]"
@ RTGCT = $RTRGCS[$NT]
set RIMIN = $RIMINS[$NT]
set RIMAX = $RIMAXS[$NT]
set QMASK = 0x80004000
@ MMISS = 1000
@ MINCV = 850
@ MMINCV = 700
set APODE = 0.9765625
# for MAI calc
set MSCALE = 0.04

# output series
set TSER = $NMSP.$BASE\track$SUFX
set PSER = $NMSP.$BASE\pspec$SUFX
set CSER = $NMSP.$BASE\fitsc$SUFX
set FSER = $NMSP.$BASE\fitsf$SUFX
set FLOW = $NMSP.$BASE\flows$SUFX\_frame
# set THRM = $NMSP.$BASE\struc$SUFX

# input series
set ISER = $NMSP.V_45s
# set MSER = mdi.fd_M_96m_lev18
set MSER = $NMSP.M_45s
set BCKG = $NMSP.V_avg120
set GSER = yale_cb.guess_table
set GUESS = $GSER"[1]"
set KSER = hmi.HSKernels

# auxiliary files
set NOTE = ~rick/hmi/notify
set RJCT = ~rick/hmi/qual/reject.V

if ($TEST) then
# parse testoptions file for possible substitution of I/O series and files
  grep -q "^ISER =" $TSTOPT
  if ($status == 0) set ISER = `grep "^ISER =" $TSTOPT | awk '{print $3}'`
  grep -q "^MSER =" $TSTOPT
  if ($status == 0) set MSER = `grep "^MSER =" $TSTOPT | awk '{print $3}'`
  grep -q "^BCKG =" $TSTOPT
  if ($status == 0) set BCKG = `grep "^BCKG =" $TSTOPT | awk '{print $3}'`
  grep -q "^GSER =" $TSTOPT
  if ($status == 0) set GSER = `grep "^GSER =" $TSTOPT | awk '{print $3}'`
  grep -q "^KSER =" $TSTOPT
  if ($status == 0) set KSER = `grep "^KSER =" $TSTOPT | awk '{print $3}'`
  grep -q "^RJCT =" $TSTOPT
  if ($status == 0) then
    set RJCT = `grep "^RJCT =" $TSTOPT | awk '{print $3}'`
    if ($RJCT == "") set RJCT = "Not Specified"
  endif
# but override these if starting in the middle of the script
  if ($SKIPTRK) set TSER = hmi.$BASE\track$SUFX
  if ($SKIPSPC) set PSER = hmi.$BASE\pspec$SUFX
  if ($SKIPFIT) set FSER = hmi.$BASE\fitsf$SUFX
  if ($SKIPINV) set PSER = hmi.$BASE\pspec$SUFX
endif

#  check that input and product series exist
foreach SER ($ISER $MSER $BCKG $GSER $TSER $PSER $CSER $FSER $FLOW $KSER)
  show_info -j ds= "$SER" >& /dev/null
  if ($status) then
    echo Error: series "$SER" does not exist\; full script will fail
    exit
  endif
end

set KRNL = $KSER"[cm_opal78]"

# determine root location of scratch and temp directory files
set TMPFSLOC = ~rick/hmi/tmpfs
set TMPARSE = ~rick/bin/tmplocs
set ALTDIR = ~rick/hmi
if (-x $TMPARSE) then
  set XXLOCS = (`$TMPARSE $TMPFSLOC $ALTDIR`)
  set TEMP = $XXLOCS[1]
  set SCRT = $XXLOCS[2]
else
  set TEMP = /tmp
  set SCRT = /tmp
endif

set HOSTNAME = `hostname`
set HOSTID = `basename $HOSTNAME .Stanford.EDU`
set PROCID = $HOSTID\_$$

set TMPB = $TEMP/$PLID$SUFX
if ($TEST) set TMPB = $TMPB.$TW
if (!(-d $TMPB)) mkdir $TMPB
set MSGS = $TEMP/msgs
if (!(-d $MSGS)) mkdir $MSGS
set SCRB = $SCRT/$PLID
if ($TEST) set SCRB = $SCRB\_test
if (!(-d $SCRB)) mkdir $SCRB
set TMPD = $TMPB/$CROT
if (!(-d $TMPD)) mkdir $TMPD
set LOGF = $SCRB/runlog$SUFX
set RLOG = $TMPB/$CARTIM
set MMSG = $MSGS/msg.$PROCID
set TLIST = $TMPB/rd_inf.$$
set MLIST = $TMPB/rd_mai.$$
set TIMES = $SCRB/latency
set DTIME = $SCRB/fd$TILES
set QRES = $TEMP/qres
if (!(-d $QRES)) mkdir $QRES

set NOW = `date +%Y.%m.%d_%T`
set STARTED = $NOW
onintr INTERRUPT

# check gatekeeper for permission to proceed
set TURN = ~rick/hmi/pikewatch
set PIKE = ~rick/hmi/pike
if ($TEST) then
  set RES = (`$TURN $PIKE -test`)
else
  set RES = (`$TURN $PIKE`)
endif
@ NOGO = $RES[1]
if ($NOGO) goto TURNOUT

limit vm ${PLIM}M

# check coverage
$COVER ds= $ISER tmid= $CARTIM length= $LNGTH \
    max_miss= $MMISS qmask= $QMASK reject= $RJCT > $TLIST
@ LINES = `wc -l $TLIST |  awk '{print $1}'`
if ($LINES < 2) then
  @ CVG = 0
else
  set ECVG = `head -2 $TLIST | tail -1 | awk '{print $4}'`
  @ CVG = `echo $ECVG | awk -F. '{print $1}'`
  @ CVG *= 1000
  @ CVGFRAC = `echo $ECVG | awk -F. '{print $2}' | sed  -e "s/^0*//"`
  @ CVG += $CVGFRAC
endif
set CVRG = 0.$CVG
if ($CVG >= 1000) set CVRG = 1.000

set TTIME = '*'
set PTIME = '*'
set FTIME = '*'
set CTIME = '*'
set ITIME = '*'
@ RGNCT = 0

# set up logging, notification
set SUBJ = "HMI ring-diagram $SYSE-deg synoptic frame $TW processing for $CARTIM"
if ($SKIPTRK || $SKIPSPC || $SKIPFIT || $SKIPINV || $RESTART) then
  echo "$NOW resume $CARTIM $TILES-deg $TW (coverage $CVRG)" > $MMSG
  @ STRTSTOP = 0
else
  echo "$NOW begin $CARTIM $TILES-deg $TW (coverage $CVRG)" > $MMSG
  @ STRTSTOP = 1
endif
if ($STRTSTOP) @ PBEGIN = `date +%s`
# cat $MMSG
if ($CVG < $MINCV) then
  if (($CVG < $MMINCV) && ($TEST == 0)) then
    echo "Notice: effective coverage < 0.$MMINCV" >> $MMSG
    echo "        processing not attempted" >> $MMSG
    cat $TLIST >> $MMSG
    echo "  ($CARTIM) Effective coverage < 0.$MMINCV; processing abandoned" >> $LOGF
    set SUBJ = "HMI ring-diagram $SYSE-deg synoptic frame processing abandoned for $CARTIM"
    @ STRTSTOP = 0
    goto CLEANUP
  endif
  echo "Warning: effective coverage < 0.$MINCV" >> $MMSG
  cat $MMSG >> $LOGF
  cat $TLIST >> $MMSG
else
  cat $MMSG >> $LOGF
endif
rm $TLIST

if ($SKIPTRK) goto SKIP_TRACK
if ($SKIPSPC) goto SKIP_PSPEC
if ($SKIPFIT) goto SKIP_FITSF
if ($SKIPINV) goto SKIP_INVRT

# check for background average, create if necessary
@ CR60 = $CROT
if ($CLON > 330) then
  @ CL60 = 360
else if ($CLON > 270) then
  @ CL60 = 300
else if ($CLON > 210) then
  @ CL60 = 240
else if ($CLON > 150) then
  @ CL60 = 180
else if ($CLON > 90) then
  @ CL60 = 120
else if ($CLON > 30) then
  @ CL60 = 60
else
  @ CR60++
  @ CL60 = 360
endif
set BCK = $BCKG"[$CR60][$CL60]"
@ BCKCT = `show_info -c ds= "$BCK" | awk '{print $1}'`
if ($BCKCT < 1) then
  echo "Warning: Data average record $BCK does not exist"  >> $MMSG
  echo "         Background subtraction skipped"  >> $MMSG
  set BCK = "Not Specified"
endif

if (-e $RLOG)  mv $RLOG $RLOG.bck
if ($CVG < $MINCV) then
  echo "Warning: effective coverage < 0.$MINCV" >> $RLOG
  cat $TLIST >> $RLOG
endif
# prepare appropriate target lists
$GENTG time= $CARTIM grid= rdsyn$TILES > $TLIST
@ STRIPCT = `wc -l $TLIST | awk '{print $1}'`
@ STRIPCT /= 2
@ STRIP = $RESTART
@ EXIST = `show_info -bcq ds= $TSER"[$CROT][$CLON]"`
@ TOTML = 0
@ TOTEL = 0
while ($STRIP < $STRIPCT)
  @ STRIP++
  @ LINCT = $STRIP * 2
  set LATS = (`head -$LINCT $TLIST | tail -2 | head -1`)
  set LONS = (`head -$LINCT $TLIST | tail -1`)

  if ($#LATS != $#LONS) then
    echo Warning: numbers of longitudes and latitudes differ
    if ($#LONS > $RGNCT) @ RGNCT = $#LONS
  endif
  set LATLIST = $LATS[1]
  set LONLIST = $LONS[1]
  @ N = 1
  while ($N < $#LATS)
    @ N++
    set LATLIST = "$LATLIST, $LATS[$N]"
  end
  @ N = 1
  while ($N < $#LONS)
    @ N++
    set LONLIST = "$LONLIST, $LONS[$N]"
  end
  @ EXPCT = $#LATS
  if ($#LONS > $#LATS) @ EXPCT = $#LONS
  @ RGNCT += $EXPCT

# determine MAI's for regions to be tracked
  @ BEGUN = `date +%s`
  $LSMAI ds= $MSER cr= $CROT cl= $CLON \
      scale= $MSCALE extent= $MSIZE interval= $SYSE \
      lat= "{$LATLIST}" lon= "{$LONLIST}" > $MLIST
  set MAIS = (`head -1 $MLIST`)
  if ($#MAIS < 1) then
    set MAILIST = NaN
  else if ("$MAIS[1]" =~ "<2") then
    set MAILIST = NaN
  else
    set MAIS = (`head -1 $MLIST`)
    set MAILIST = $MAIS[1]
    @ N = 1
    while ($N < $#MAIS)
      @ N++
      set MAILIST = "$MAILIST, $MAIS[$N]"
    end
  endif
  if (-e $MLIST) rm $MLIST
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ TOTML += $ELAPS
  @ ELAPS += 30
  @ ELAPS /= 60
  if ($STRIPCT == 1) then
    echo "  time for MAI calc for $EXPCT regions on `hostname`: $ELAPS min" >> $MMSG
  endif

  @ BEGUN = `date +%s`
  $TRACK out= $TSER in= $ISER tmid= $CARTIM length= $LNGTH \
      bckgn= "$BCK" qmask= $QMASK max_miss= $MMISS reject= $RJCT \
      map= Postel scale= $SCALE cols= $SIZE rows= $SIZE \
      tobs_key= T_REC \
      lat= "{$LATLIST}" lon= "{$LONLIST}" mai= "{$MAILIST}" >>& $RLOG
  if ($status) then
    set SUBJ = "HMI $SYSE-deg ring-diagram $TW processing for $CARTIM incomplete"
    echo "  tracking failure on `hostname`"  >> $MMSG
    echo "  run log is on $RLOG"  >> $MMSG
    echo "  tracking failure on `hostname` for $CARTIM ($TYPE)"  >> $LOGF
    @ RGNCT -= $EXPCT
    @ STRTSTOP = 0
    goto CLEANUP
  endif
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ TOTEL += $ELAPS
  @ ELAPS += 30
  @ ELAPS /= 60
  if ($STRIPCT == 1) then
    echo "  time for tracking $EXPCT regions on `hostname`: $ELAPS min" >> $MMSG
    set TTIME = $ELAPS
  endif
  echo "  ($CARTIM) time for tracking $EXPCT regions on `hostname` ($STRIP / $STRIPCT): $ELAPS min" >> $LOGF
end

if ($STRIPCT > 1) then
  @ TOTML += 30
  @ TOTML /= 60
  echo "  total time for MAI calc for $RGNCT regions on `hostname`: $TOTML min" >> $MMSG
  echo "  ($CARTIM) total time for MAI calc $RGNCT regions on `hostname`: $TOTML min" >> $LOGF
  @ TOTEL += 30
  @ TOTEL /= 60
  echo "  total time for tracking $RGNCT regions on `hostname`: $TOTEL min" >> $MMSG
  echo "  ($CARTIM) total time for tracking $RGNCT regions on `hostname`: $TOTEL min" >> $LOGF
  set TTIME = $TOTEL
  if ($RESTART) set TTIME = $TTIME'*'
endif
@ RPCT = `show_info -bcq ds= $TSER"[$CROT][$CLON]"`
@ RPCT -= $EXIST
if ($RPCT != $RGNCT) then
  echo "  WARNING:  only $RPCT tracked cubes written!" >> $MMSG
  echo "  WARNING:  only $RPCT tracked cubes written!" >> $LOGF
  set TTIME = $TTIME'*'
  @ STRTSTOP = 0
endif
echo "    tracked data in $TSER""[$CROT][$CLON]" >> $MMSG

SKIP_TRACK:

# check gatekeeper for permission to proceed
if ($TEST) then
  set RES = (`$TURN $PIKE -test`)
else
  set RES = (`$TURN $PIKE`)
endif
@ NOGO = $RES[1]
if ($NOGO) goto TURNOUT

@ BEGUN = `date +%s`
@ RGNCT = `show_info -cq ds= $TSER"[$CROT][$CLON]"`
@ EXIST = `show_info -bcq ds= $PSER"[$CROT][$CLON]"`
$PSPEC pspec= $PSER in= $TSER"[$CROT][$CLON]" mask_in= $APODE >>& $RLOG
if ($status) then
  set SUBJ = "HMI $SYSE-deg ring-diagram $TW processing for $CARTIM incomplete"
  echo "  pspec failure on `hostname`"  >> $MMSG
  echo "  run log is on $RLOG"  >> $MMSG
  echo "  ($CARTIM) pspec failure on `hostname` for $CARTIM"  >> $LOGF
  @ STRTSTOP = 0
  goto CLEANUP
else
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ ELAPS += 30
  @ ELAPS /= 60
  echo "  time for $RGNCT power spectra on `hostname`: $ELAPS min" >> $MMSG
  echo "    spectra in $PSER""[$CROT][$CLON]" >> $MMSG
  echo "  ($CARTIM) time for $RGNCT power spectra on `hostname`: $ELAPS min" >> $LOGF
  set PTIME = $ELAPS
  @ RPCT = `show_info -bcq ds= $PSER"[$CROT][$CLON]"`
  @ RPCT -= $EXIST
  if ($RPCT != $RGNCT) then
    echo "  WARNING:  only $RPCT spectra written!" >> $MMSG
    echo "  WARNING:  only $RPCT spectra written!" >> $LOGF
    set PTIME = $PTIME'*'
    @ STRTSTOP = 0
  endif
endif

SKIP_PSPEC:

# check gatekeeper for permission to proceed
if ($TEST) then
  set RES = (`$TURN $PIKE -test`)
else
  set RES = (`$TURN $PIKE`)
endif
@ NOGO = $RES[1]
if ($NOGO) goto TURNOUT

@ BEGUN = `date +%s`
@ RGNCT = `show_info -cq ds= $PSER"[$CROT][$CLON]"`
@ EXIST = `show_info -bcq ds= $FSER"[$CROT][$CLON]"`
$RFITF out= $FSER in= $PSER"[$CROT][$CLON]" \
    nmax= $NMAX kstart= "{$KLOW}" kstop= "{$KHIGH}" >>& $RLOG
if ($status) then
  set SUBJ = "HMI $SYSE-deg ring-diagram $TW processing for $CARTIM incomplete"
  echo "  rdfitf failure on `hostname`"  >> $MMSG
  echo "  run log is on $RLOG"  >> $MMSG
  echo "  ($CARTIM) rdfitf failure on `hostname` for $CARTIM"  >> $LOGF
  @ STRTSTOP = 0
  goto CLEANUP
else
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ ELAPS += 30
  @ ELAPS /= 60
  echo "  time for quick fitting $RGNCT spectra on `hostname`: $ELAPS min" >> $MMSG
  echo "    fits in $FSER""[$CROT][$CLON]" >> $MMSG
  echo "  ($CARTIM) time for quick fitting $RGNCT spectra on `hostname`: $ELAPS min" >> $LOGF
  set FTIME = $ELAPS
  @ RPCT = `show_info -bcq ds= $FSER"[$CROT][$CLON]"`
  @ RPCT -= $EXIST
  if ($RPCT != $RGNCT) then
    echo "  WARNING:  only $RPCT fit records written!" >> $MMSG
    echo "  WARNING:  only $RPCT fit records written!" >> $LOGF
    set FTIME = $FTIME'*'
    @ STRTSTOP = 0
    goto SKIP_INVRT
  endif
endif

SKIP_FITSF:

if ($SYSE == 5) goto SKIP_INVRT

# check gatekeeper for permission to proceed
if ($TEST) then
  set RES = (`$TURN $PIKE -test`)
else
  set RES = (`$TURN $PIKE`)
endif
@ NOGO = $RES[1]
if ($NOGO) goto TURNOUT

@ BEGUN = `date +%s`
@ RGNCT = `show_info -cq ds= $FSER"[$CROT][$CLON]"`
@ EXIST = `show_info -bcq ds= $FLOW"[$CROT][$CLON]"`
$RVINV out= $FLOW in= $FSER cr= $CROT clon= $CLON kernel= "$KRNL" \
    num= $RTGCT rb= $RIMIN re= $RIMAX >>& $RLOG
if ($status) then
  set SUBJ = "HMI $SYSE-deg ring-diagram $TW processing for $CARTIM incomplete"
  echo "  rdvinv failure on `hostname`"  >> $MMSG
  echo "  run log is on $RLOG"  >> $MMSG
  echo "  ($CARTIM) rdvinv failure on `hostname` for $CARTIM"  >> $LOGF
  @ STRTSTOP = 0
else
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ ELAPS += 30
  @ ELAPS /= 60
  echo "  time for $RGNCT flow inversions on `hostname`: $ELAPS min" >> $MMSG
  echo "    inversions in $FLOW""[$CROT][$CLON]" >> $MMSG
  echo "  ($CARTIM) time for $RGNCT flow inversions on `hostname`: $ELAPS min" >> $LOGF
  set ITIME = $ELAPS
  @ RPCT = `show_info -bcq ds= $FLOW"[$CROT][$CLON]"`
  @ RPCT -= $EXIST
  if ($RPCT) then
    set SDIR = `show_info -pq ds= $FLOW"[$CROT][$CLON]"`
    @ UXCT = `/bin/ls $SDIR/Ux | wc -l`
    @ UYCT = `/bin/ls $SDIR/Uy | wc -l`
    if ($UXCT != $RGNCT || $UYCT != $RGNCT) then
      echo "  WARNING:  only $UXCT Ux and $UYCT Uy inversions written!" >> $MMSG
      echo "  WARNING:  only $UXCT Ux and $UYCT Uy inversions written!" >> $LOGF
      set ITIME = $ITIME'*'
      @ STRTSTOP = 0
    endif
  else
    echo "  WARNING:  no inversion records written!" >> $MMSG
    echo "  WARNING:  no inversion records written!" >> $LOGF
    set ITIME = $ITIME'*'
    @ STRTSTOP = 0
  endif
endif
# if ($SYSE == 5) goto CLEANUP

SKIP_INVRT:

# check gatekeeper for permission to proceed
if ($TEST) then
  set RES = (`$TURN $PIKE -test`)
else
  set RES = (`$TURN $PIKE`)
endif
@ NOGO = $RES[1]
if ($NOGO) goto TURNOUT

@ RGNCT = `show_info -cq ds= $PSER"[$CROT][$CLON]" | awk '{print $1}'`
# prepare scripts for batch processing of fitting
set FILE = `echo $CARTIM | tr ':' '.'`
set FILEN = $PLID$SUFX.$FILE
set SCRIPT = $TMPD/$FILEN
@ GSRCT = `show_info -c "$GUESS" | awk '{print $1}'`
if (!($GSRCT)) then
  echo "  rdfitc not attempted: no records in guess series" >> $MMSG
  echo "  ($CARTIM) rdfitc not attempted for $CARTIM"  >> $LOGF
  @ FINIS = `date +%s`
  goto CLEANUP
endif
set GUESSDIR = `show_info -pq ds= "$GUESS"`
if (!($#GUESSDIR)) then
  echo "  rdfitc not attempted: guess record contains no data" >> $MMSG
  echo "  ($CARTIM) rdfitc not attempted for $CARTIM"  >> $LOGF
  @ FINIS = `date +%s`
  @ STRTSTOP = 0
  goto CLEANUP
endif
set GUESSNAM = `/bin/ls $GUESSDIR | awk '{print $1}'`
set GUESSFIL = $GUESSDIR/$GUESSNAM

if ($SYSE == 5) then
  @ TOTEL = 0
  @ TOTCT = 0
  @ FAILCT = 0
  @ EXIST = `show_info -bcq ds= $CSER"[$CROT][$CLON]"`
  foreach LAT (`$GENTG time= $CARTIM grid= rdcm$TILES`)
    set noglob
    set RGNS = (`show_info -iq ds= $PSER"[$CROT][$CLON][][$LAT][]"`)
    unset noglob
    @ EXPCT = $#RGNS
    @ QJOK = 0
    if (-e $RLOG) @ QJOK = `grep "exited with exit code 0." $RLOG | wc -l`
    @ TOTCT = $QJOK + $EXPCT
    echo "#\!/bin/csh -f" > $SCRIPT
    echo "limit vm $VMEM"M >> $SCRIPT
    echo set noglob >> $SCRIPT
    echo 'set RGNS =  ('"$RGNS"')' >> $SCRIPT
    echo 'set RGN = $RGNS[$SGE_TASK_ID]' >> $SCRIPT
    echo 'set RRLOG = '$RLOG$LAT.'$SGE_TASK_ID' >> $SCRIPT
    echo "$RFITC \" >> $SCRIPT
    echo "  out= $CSER \" >> $SCRIPT
    echo "  guessfile= $GUESSFIL \" >> $SCRIPT
    echo '  in= "$RGN" >>& $RRLOG' >> $SCRIPT
    @ BEGUN = `date +%s`
    qsub -sync yes -t 1-$EXPCT -q $QUEUE -e $QRES -o $QRES $SCRIPT >>& $RLOG
    @ QJOK = 0
    if (-e $RLOG) @ QJOK = `grep "exited with exit code 0." $RLOG | wc -l`
    @ FAIL = $TOTCT - $QJOK
    if ($FAIL) then
      @ FAILCT++
      echo "  $FAIL rdfitc failures on cluster at Latitude `printf %+05.1f $LAT`" >> $MMSG
      echo "  ($CARTIM) $FAIL rdfitc failures on cluster at Latitude `printf %+05.1f $LAT`" >> $LOGF
      mv $SCRIPT $SCRIPT$LAT
    endif
    @ FINIS = `date +%s`
    @ ELAPS = $FINIS - $BEGUN
    @ TOTEL += $ELAPS
  end
  @ TOTEL += 30
  @ TOTEL /= 60
  if ($FAILCT) then
    set SUBJ = "HMI $SYSE-deg ring-diagram $TW processing for $CARTIM incomplete"
    @ FITSDONE = `show_info -cq ds= $CSER"[$CROT][$CLON]"`
    echo "  $FITSDONE successful fits" >> $MMSG
    echo "  $FITSDONE successful fits" >> $LOGF
    echo "  total time for fitting $FITSDONE regions on the cluster: $TOTEL min" >> $MMSG
    echo "  ($CARTIM) total time for fitting $FITSDONE regions on the cluster: $TOTEL min" >> $LOGF
    @ STRTSTOP = 0
  else
    echo "  total time for fitting $RGNCT regions on the cluster: $TOTEL min" >> $MMSG
    echo "  ($CARTIM) total time for fitting $RGNCT regions on the cluster: $TOTEL min" >> $LOGF
    rm $RLOG+*
    rm $RLOG-*
  endif
  echo "    fits in $CSER""[$CROT][$CLON]" >> $MMSG
  if (-e $SCRIPT) rm $SCRIPT
  set CTIME = $TOTEL
  @ RPCT = `show_info -bcq ds= $CSER"[$CROT][$CLON]"`
  @ RPCT -= $EXIST
  if ($RPCT != $RGNCT) then
    echo "  WARNING:  only $RPCT fit records written!" >> $MMSG
    echo "  WARNING:  only $RPCT fit records written!" >> $LOGF
    set CTIME = $CTIME'*'
    @ STRTSTOP = 0
  endif
else
  @ EXIST = `show_info -bcq ds= $CSER"[$CROT][$CLON]"`
  set noglob
  if ($SYSE == 30 || $SYSE == 15) then
    set LATS = `$GENTG -c time= $CARTIM grid= rd+$TILES | head -1`
    set LONS = `$GENTG -c time= $CARTIM grid= rd+$TILES | tail -1`
    unset noglob
    @ EXPCT = $#LATS
    @ QJOK = 0
    if (-e $RLOG) @ QJOK = `grep "exited with exit code 0." $RLOG | wc -l`
    @ EXPCT += $QJOK
    echo "#\!/bin/csh -f" > $SCRIPT
    echo "limit vm $VMEM"M >> $SCRIPT
    echo set noglob >> $SCRIPT
    echo 'set LATS =  ('"$LATS"')' >> $SCRIPT
    echo 'set LONS =  ('"$LONS"')' >> $SCRIPT
    echo 'set LAT = $LATS[$SGE_TASK_ID]' >> $SCRIPT
    echo 'set LON = $LONS[$SGE_TASK_ID]' >> $SCRIPT
    echo 'set RRLOG = '$RLOG.'$SGE_TASK_ID' >> $SCRIPT
    echo 'set RGN = `show_info -iq ds= '$PSER'"['$CROT']['$CLON'][][$LAT][$LON]"`' >> $SCRIPT
    echo "$RFITC \" >> $SCRIPT
    echo "  out= $CSER \" >> $SCRIPT
    echo "  guessfile= $GUESSFIL \" >> $SCRIPT
    echo '  in= "$RGN" >>& $RRLOG' >> $SCRIPT
  else
# this branch of the script is never reached
    set RGNS = (`show_info -iq ds= $PSER"[$CROT][$CLON][][][0]"`)
    unset noglob
    @ EXPCT = $#RGNS
    @ QJOK = 0
    if (-e $RLOG) @ QJOK = `grep "exited with exit code 0." $RLOG | wc -l`
    @ EXPCT += $QJOK
    echo "#\!/bin/csh -f" > $SCRIPT
    echo "limit vm $VMEM"M >> $SCRIPT
    echo set noglob >> $SCRIPT
    echo 'set RGNS =  ('"$RGNS"')' >> $SCRIPT
    echo 'set RRLOG = '$RLOG.'$SGE_TASK_ID' >> $SCRIPT
    echo 'set RGN = $RGNS[$SGE_TASK_ID]' >> $SCRIPT
    echo "$RFITC \" >> $SCRIPT
    echo "  out= $CSER \" >> $SCRIPT
    echo "  guessfile= $GUESSFIL \" >> $SCRIPT
    echo '  in= "$RGN" >>& $RRLOG' >> $SCRIPT
  endif
  @ BEGUN = `date +%s`
  qsub -sync yes -t 1-$EXPCT -q $QUEUE -e $QRES -o $QRES $SCRIPT >>& $RLOG
  @ QJOK = 0
  if (-e $RLOG) @ QJOK = `grep "exited with exit code 0." $RLOG | wc -l`
  @ FAIL = $EXPCT - $QJOK
  if ($FAIL) then
    set SUBJ = "HMI $SYSE-deg ring-diagram $TW processing for $CARTIM incomplete"
    echo "  $FAIL rdfitc failures on cluster" >> $MMSG
    echo "  ($CARTIM) $FAIL rdfitc failures on cluster" >> $LOGF
    echo "  qsub script is $SCRIPT" >> $MMSG
    echo "  qsub script is $SCRIPT" >> $LOGF
    @ STRTSTOP = 0
  else
    rm $SCRIPT
    rm $RLOG.*
  endif
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ ELAPS += 30
  @ ELAPS /= 60
  echo "  time for fitting $EXPCT spectra on the cluster: $ELAPS min" >> $MMSG
  echo "    fits in $CSER""[$CROT][$CLON]" >> $MMSG
  echo "  ($CARTIM) time for fitting $EXPCT spectra on the cluster: $ELAPS min" >> $LOGF
  set CTIME = $ELAPS
  if ($FAIL) set CTIME = $CTIME'*'
  @ RPCT = `show_info -bcq ds= $CSER"[$CROT][$CLON]"`
  @ RPCT -= $EXIST
  if ($RPCT != $EXPCT) then
    echo "  WARNING:  only $RPCT fit records written!" >> $MMSG
    echo "  WARNING:  only $RPCT fit records written!" >> $LOGF
    set CTIME = $CTIME'*'
    @ STRTSTOP = 0
    set SUBJ = "HMI ring-diagram $TW processing for $CARTIM incomplete"
  endif
endif
goto CLEANUP

TURNOUT:
set NOW = `date +%Y.%m.%d_%T`
set SUBJ = "HMI ring-diagram $TW processing for $CARTIM aborted"
set TYPE = misc
echo "-> $NOW Script $PROG aborted! <-" >> $MMSG
echo "$CARTIM $SYSE  $STARTED  aborted" >> $TIMES
echo "$CARTIM	$TTIME	$PTIME	$FTIME	$ITIME	$CTIME	aborted" >> $DTIME
if ($NOGO < 0) then
  echo "   watcher script $TURN called with invalid argument" >> $MMSG
  echo "   or file $PIKE has invalid format" >> $MMSG
else
  @ HRCT = $NOGO / 3600
  @ NOGO -= $HRCT * 3600
  @ MNCT = $NOGO / 60
  @ NOGO -= $MNCT * 60
  echo -n "   file $PIKE contains NoGo signal for $HRCT" >> $MMSG
  echo `printf :%02d:%02d $MNCT $NOGO` >> $MMSG
  if ($#RES > 1) then
    echo "   Reason: $RES[2-]" >> $MMSG
  endif
endif
set RGNCT = '?'
@ STRTSTOP = 0
goto CLEANUP

INTERRUPT:
set SUBJ = "HMI ring-diagram $TW processing for $CARTIM interrupted"
set TYPE = misc
echo "-> Script $PROG or module aborted! <-" >> $MMSG
echo "$CARTIM $SYSE  $STARTED  aborted" >> $TIMES
echo "$CARTIM	$TTIME	$PTIME	$FTIME	$ITIME	$CTIME	aborted" >> $DTIME
set RGNCT = '?'
@ STRTSTOP = 0

CLEANUP:
set NOW = `date +%Y.%m.%d_%T`
set NOTIFY = `grep ^$TYPE $NOTE | awk '{print $2}'`
if ($STRTSTOP) then
  @ ELAPS = $FINIS - $PBEGIN
  @ ELAPS += 30
  @ ELAPS /= 60
  @ HREL = $ELAPS / 60
  @ MNEL = $ELAPS % 60
else
  @ HREL = 0
  @ MNEL = 0
  echo -n "# " >> $TIMES
endif
echo "$CARTIM $TILES  $STARTED  $HREL`printf :%02d $MNEL`" >> $TIMES
echo "$CARTIM	$TTIME	$PTIME	$FTIME	$CTIME	$ITIME" >> $DTIME
echo "$NOW finish $CARTIM $SYSE-deg ($RGNCT regions)" >> $MMSG
if ($STRTSTOP) echo "  End-to-end latency = $HREL`printf :%02d $MNEL`" >> $MMSG
echo $SUBJ > $MSGS/subj.$PROCID
if ($#NOTIFY) then
  echo "$NOTIFY" > $MSGS/list.$PROCID
else
  echo `whoami` > $MSGS/list.$PROCID
endif
echo "$NOW finish $CARTIM ($RGNCT regions)" >> $LOGF
if (-e $TLIST) rm $TLIST
