#!/bin/csh -f
# script to run multiple instances of trackings plus analyses in the
#    ring-diagram synoptic series for a set of given time centers
# The invoked scripts should be run every 5 deg of Carrington rotation,
#   i.e. about 9 hours for the 5-deg series, every 15 deg (27 hours) for
#   the 15-deg series, and 30 deg (54 hours) for the 30-deg series
#
# The script does not check for the pre-existence of the averaged data for
#   background subtraction. This is bad because the first time a missing
#   average is encountered, all three instances of the rdday script will
#   create it, resulting in unnecessary extra processing and records

@ TEST = 0	# set to 1 for production in namespace hmi_test
if ("$1" =~ '-test') then
  @ TEST = 1
  shift
endif

if ($#argv < 2) then
  echo "usage: $0 [-test] Carrington_rot Lon_start [Lon_stop] [spacing]"
  echo "       default spacing = 540 min"
  exit
endif

@ CROT = $1
@ CR1 = $CROT
@ CL0 = `echo $2 | sed  -e "s/^0*//"`
@ CL1 = $CL0
@ SLEEP = 540
if ($#argv > 2) then
  @ CL1 = `echo $3 | sed  -e "s/^0*//"`
  if ($#argv > 3) @ SLEEP = `echo $4 | sed  -e "s/^0*//"`
endif

@ SLEEP *= 60

if ($CL1 > $CL0) @ CR1++

# parameters (for coverage)
set QMASK = 0x80004000
@ MMISS = 10000
@ MINCV = 700

# modules, programs, scripts
set COVER = rdcover
set SCRIPT = rdday
set AVG120 = avg120

set QUEUE = j.q

# base naming convention for I/O series, logs, and scripts
if ($TEST) then
  set TSTOPT = ~rick/hmi/rings/testoptions
  if (!(-r $TSTOPT)) then
    echo Error: unable to read file $TSTOPT for test options
    exit
  endif
  set NMSP = hmi_test
  set ARG = -test
  grep -q "^COVER =" $TSTOPT
  if ($status == 0) set COVER = `grep "^COVER =" $TSTOPT | awk '{print $3}'`
else
  set NMSP = hmi
  set ARG
endif
set PLID = $NMSP\rdVsyn

#  check that required scripts and programs are in path or rooted
foreach CMD ($SCRIPT $AVG120 $COVER)
  which $CMD > /dev/null
  if ($status) then
    if (!(-x $CMD)) then
      echo Error: command $CMD not in path\; script will fail
      exit
    endif
  endif
end

# input/output series
set BCKG = $NMSP.V_avg120
set ISER = $NMSP.V_45s

if ($TEST) then
  grep -q "^ISER =" $TSTOPT
  if ($status == 0) set ISER = `grep "^ISER =" $TSTOPT | awk '{print $3}'`
  grep -q "^BCKG =" $TSTOPT
  if ($status == 0) set BCKG = `grep "^BCKG =" $TSTOPT | awk '{print $3}'`
endif

# auxiliary files
set RJCT = ~rick/hmi/qual/reject.V

set TMPFSLOC = ~rick/hmi/tmpfs
if (-r $TMPFSLOC) then
  set TMPFS = `egrep ^/tmp $TMPFSLOC`
  set TEMP = $TMPFS/`whoami`
  if (!(-d $TEMP)) mkdir $TEMP
  if (!(-w $TEMP)) set TEMP = /tmp
  set SCRFS = `egrep ^/scr $TMPFSLOC`
  set SCRT = $SCRFS/`whoami`
  if (!(-d $SCRT)) mkdir $SCRT
  if (!(-w $SCRT)) set SCRT = /tmp
else
  set TEMP = /tmp
  set SCRT = /tmp
endif

set TMPB = $TEMP/$PLID
if (!(-d $TMPB)) mkdir $TMPB
set TLIST = $TMPB/rd_inf.$$
set RLOG = $SCRT/$PLID.log
set QRES = $TEMP/qres
if (!(-d $QRES)) mkdir $QRES

#  check that input and product series exist
foreach SER ($ISER $BCKG)
  show_info -j ds= $SER >& /dev/null
  if ($status) then
    echo Error: series $SER does not exist\; script will fail
    exit
  endif
end

@ CLON = $CL0
while ($CROT < $CR1 || $CLON >= $CL1)
# check for background average, create if necessary
  @ CR60 = $CROT
  if ($CLON > 330) then
    @ CL60 = 360
  else if ($CLON > 270) then
    @ CL60 = 300
  else if ($CLON > 210) then
    @ CL60 = 240
  else if ($CLON > 150) then
    @ CL60 = 180
  else if ($CLON > 90) then
    @ CL60 = 120
  else if ($CLON > 30) then
    @ CL60 = 60
  else
    @ CR60++
    @ CL60 = 360
  endif
  set BCK = $BCKG"[$CR60][$CL60]"
  @ BCKCT = `show_info -c ds= "$BCK" | awk '{print $1}'`
  if ($BCKCT < 1) then
    echo "Data average record $BCK does not exist: processing" >> $RLOG
    qsub -q $QUEUE -e $QRES -o $QRES -sync y $AVG120 $ARG -v $CR60 $CL60
    if ($status) then
      set NOW = `date +%Y.%m.%d_%T`
      echo "$NOW Data averaging for background subtraction failed" >> $RLOG
      echo "  Processing abandoned" >> $RLOG
      exit
    endif
  endif

  @ RUNNING = 0
  set CARTIM = $CROT\:`printf %03d $CLON`
# check for coverage, skip if too low
  @ LNGTH = 768
  $COVER ds= $ISER tmid= $CARTIM length= $LNGTH \
      max_miss= $MMISS qmask= $QMASK reject= $RJCT > $TLIST
  @ LINES = `wc -l $TLIST |  awk '{print $1}'`
  if ($LINES < 2) then
    @ CVG = 0
  else
    set ECVG = `head -2 $TLIST | tail -1 | awk '{print $4}'`
    @ CVG = `echo $ECVG | awk -F. '{print $1}'`
    @ CVG *= 1000
    @ CVG += `echo $ECVG | awk -F. '{print $2}' | sed  -e "s/^0*//"`
  endif
  rm $TLIST
  if ($CVG > $MINCV) then
    @ RUNNING++
    set NOW = `date +%Y.%m.%d_%T`
    set QINFO = `qsub -q $QUEUE -e $QRES -o $QRES $SCRIPT $ARG 5 $CROT $CLON`
    if ($#QINFO) then
      set QPID = `echo $QINFO | awk '{print $3}'`
      echo $NOW $SCRIPT $ARG 5 $CROT $CLON submitted to $QUEUE as job $QPID >> $RLOG
    else
      echo $NOW Failed to submit $SCRIPT $ARG 5 $CROT $CLON >> $RLOG
    endif
  else
    echo Processing of 5-deg $CROT\:$CLON skipped: coverage = $ECVG >> $RLOG
  endif
  if ($CLON % 15 == 0) then
# check for coverage, skip if too low
    @ LNGTH = 2304
    $COVER ds= $ISER tmid= $CARTIM length= $LNGTH \
	max_miss= $MMISS qmask= $QMASK reject= $RJCT > $TLIST
    @ LINES = `wc -l $TLIST |  awk '{print $1}'`
    if ($LINES < 2) then
      @ CVG = 0
    else
      set ECVG = `head -2 $TLIST | tail -1 | awk '{print $4}'`
      @ CVG = `echo $ECVG | awk -F. '{print $1}'`
      @ CVG *= 1000
      @ CVG += `echo $ECVG | awk -F. '{print $2}' | sed  -e "s/^0*//"`
    endif
    rm $TLIST
    if ($CVG > $MINCV) then
      @ RUNNING++
      set NOW = `date +%Y.%m.%d_%T`
      set QINFO = `qsub -q $QUEUE -e $QRES -o $QRES $SCRIPT $ARG 15 $CROT $CLON`
      if ($#QINFO) then
	set QPID = `echo $QINFO | awk '{print $3}'`
	echo $NOW $SCRIPT $ARG 15 $CROT $CLON submitted to $QUEUE as job $QPID >> $RLOG
      else
	echo $NOW Failed to submit $SCRIPT $ARG 15 $CROT $CLON >> $RLOG
      endif
    else
      echo Processing of 15-deg $CROT\:$CLON skipped: coverage = $ECVG >> $RLOG
    endif
  endif
  if ($CLON % 30 == 0) then
# check for coverage, skip if too low
    @ LNGTH = 4608
    $COVER ds= $ISER tmid= $CARTIM length= $LNGTH \
	max_miss= $MMISS qmask= $QMASK reject= $RJCT > $TLIST
    @ LINES = `wc -l $TLIST |  awk '{print $1}'`
    if ($LINES < 2) then
      @ CVG = 0
    else
      set ECVG = `head -2 $TLIST | tail -1 | awk '{print $4}'`
      @ CVG = `echo $ECVG | awk -F. '{print $1}'`
      @ CVG *= 1000
      @ CVG += `echo $ECVG | awk -F. '{print $2}' | sed  -e "s/^0*//"`
    endif
    rm $TLIST
    if ($CVG > $MINCV) then
      @ RUNNING++
      set NOW = `date +%Y.%m.%d_%T`
      set QINFO = `qsub -q $QUEUE -e $QRES -o $QRES $SCRIPT $ARG 30 $CROT $CLON`
      if ($#QINFO) then
	set QPID = `echo $QINFO | awk '{print $3}'`
	echo $NOW $SCRIPT $ARG 30 $CROT $CLON submitted to $QUEUE as job $QPID >> $RLOG
      else
	echo $NOW Failed to submit $SCRIPT $ARG 30 $CROT $CLON >> $RLOG
      endif
    else
      echo Processing of 30-deg $CROT\:$CLON skipped: coverage = $ECVG >> $RLOG
    endif
  endif
  @ CLON -= 5
  if ($CLON <= 0) then
    @ CLON += 360
    @ CROT++
  endif
  if (($CLON >= $CL1 || $CROT < $CR1) && $RUNNING) sleep $SLEEP
end
