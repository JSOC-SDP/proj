#!/bin/csh -f
# script to run tracking and ring-diagram analyses on HMI Dopplergrams

@ TEST = 0	# set to 1 for production in namespace hmi_test
set TW
if ("$1" =~ '-test') then
  @ TEST = 1
  set TW = test
  shift
endif

if ($#argv < 1) then
  echo "usage: $0 [-test] AR [CR:CL LAT QLON-1 [QLON-2]]"
  exit
endif
set AR = $1

@ SKIPTRK = 0
@ SKIPSPC = 0
@ SKIPFIT = 0
@ SKIPINV = 0

# modules and programs
set GENTG = artargs
set LSMAI = maicalc
set TRACK = mtrack
set PSPEC = pspec3
set RFITC = rdfitc

if ($TEST) then
  set TSTOPT = ~rick/hmi/rings/testoptions
  if (!(-r $TSTOPT)) then
    echo Error: unable to read file $TSTOPT for test options
    exit
  endif
  set NMSP = hmi_test
  grep -q "^TRACK =" $TSTOPT
  if ($status == 0) set TRACK = `grep "^TRACK =" $TSTOPT | awk '{print $3}'`
  grep -q "^PSPEC =" $TSTOPT
  if ($status == 0) set PSPEC = `grep "^PSPEC =" $TSTOPT | awk '{print $3}'`
  grep -q "^RFITC =" $TSTOPT
  if ($status == 0) set RFITC = `grep "^RFITC =" $TSTOPT | awk '{print $3}'`
else
  set NMSP = hmi
endif

#  check that required modules and programs are in path or rooted
foreach CMD ($GENTG $LSMAI $TRACK $PSPEC $RFITC)
  which $CMD > /dev/null
  if ($status) then
    if (!(-x $CMD)) then
      echo Error: command $CMD not in path\; script will fail
      exit
    endif
  endif
end

#  append flags to commands as applicable
set TRACK = "$TRACK -cov"
set PSPEC = "$PSPEC -v"

# base naming convention for I/O series and logs
set BASE = rdV
set SUFX = _targ
set PLID = hmi$BASE

set TYPE = $NMSP.$BASE$SUFX

# parameters
@ SIZE = 384
# @ SIZE = 256
set SCALE = 0.04
@ LNGTH = 4608
set QMASK = 0x80004000
set APODE = 0.9765625
# for MAI calc
set MSCALE = 0.04
set MSIZE = 15.36
# set MSIZE = 10.24
@ VMEM = 2500
@ GRID = 5
set SPACE = 7.5

# output series
set TSER = $NMSP.$BASE\track$SUFX
set PSER = $NMSP.$BASE\pspec$SUFX
set CSER = $NMSP.$BASE\fitsc$SUFX

# input series
set ISER = hmi.V_45s
set NOAA = su_rsb.NOAA_ActiveRegions
set MSER = hmi.M_45s
# set MSER = mdi.fd_M_96m_lev18
set BCKG = hmi.V_avg120
set GSER = yale_cb.guess_table
set GUESS = $GSER"[1]"
set GUESSDIR = `show_info -pq ds= "$GUESS"`
set GUESSNAM = `/bin/ls $GUESSDIR | awk '{print $1}'`
set GUESSFIL = $GUESSDIR/$GUESSNAM

#  check that input and product series exist
foreach SER ($NOAA $ISER $MSER $BCKG $GSER $TSER $PSER $CSER)
  show_info -j ds= $SER >& /dev/null
  if ($status) then
    echo Error: series $SER does not exist\; full script will fail
    exit
  endif
end

# auxiliary files
set ARQR = ~rick/rings/ar/arqrlist
set HOSTNAME = `hostname`
set HOSTID = `basename $HOSTNAME .Stanford.EDU`
set PROCID = $HOSTID\_$$
set NOTE = ~rick/rings/notify
set RJCT = ~rick/hmi/qual/reject.V
set TEMP = /tmp23/`whoami`
if (!(-d $TEMP)) set TEMP = /tmp
set TMPB = $TEMP/$PLID$SUFX
if (!(-d $TMPB)) mkdir $TMPB
set MSGS = $TEMP/msgs
if (!(-d $MSGS)) mkdir $MSGS
set SCRT = /scr21/`whoami`
if (!(-d $SCRT)) set SCRT = /tmp
set SCRB = $SCRT/$PLID
if (!(-d $SCRB)) mkdir $SCRB
set TMPD = $TMPB/scripts
if (!(-d $TMPD)) mkdir $TMPD
set LOGF = $SCRB/runlog$SUFX
set RLOG = $TMPB/$AR
set MMSG = $MSGS/msg.$PROCID
set MLIST = $TMPB/rd_mai.$$

if ($#argv > 1) then
  echo parsing of locations on command line not yet supported
  exit

  if ($#argv < 4) then
    echo "usage: $0 [-test] AR [CR:CL LAT Q0LON [Q1LON]]"
    exit
  endif
  set CRCL = $2
  set LON = `echo $CRCL | awk -F: '{print $2}'`
  set LAT = $3
  set QLNE = $4
  set QLNW = $QLNE
  if ($#argv > 4) set QLNW = $5
else
  if (!(-e $ARQR)) then
    echo Error: file $ARQR not found
    exit
  endif
  set INFO = `grep "^[ 	]*$AR" $ARQR`
  if ($status || $#INFO < 5) then
    echo "Error: no entry or incomplete tabulation for AR $AR in"
    echo "       $ARQR; suggested values;"
    set DATES = `show_info -q ds= $NOAA"[][$AR]" key= ObservationTime`
    @ NCT = $#DATES / 2
    if ($NCT < 1) @ NCT++
    set CRS = `sunephem $DATES[$NCT] | tail -n 1 | awk '{print $7}' | awk -F. '{print $1}'`
    echo CR: $CRS
    echo "Lat	LonHG	(LonCM)	(Area)"
    show_info -q ds= $NOAA"[][$AR]" key= LatitudeHG,LongitudeHG,LongitudeCM,Area
    exit
  endif
  @ CROT = $INFO[3]
  set LAT = $INFO[2]
  set LONS = ($INFO[4] $INFO[5])
  if ($#INFO > 5) set LONS = ($LONS $INFO[6])
endif
@ LONC = `echo $LONS[1] | awk -F. '{print $1}' | sed  -e "s/^0*//"`

set NOW = `date +%Y.%m.%d_%T`

# set up logging, notification
set SUBJ = "HMI ring-diagram $TW processing for AR $AR"
echo "$NOW begin AR $AR $TW" > $MMSG
cat $MMSG >> $LOGF

@ TOTCT = 0
foreach LON ($LONS)
  set TLATS = `$GENTG lat= $LAT lon= $LON grid= $GRID space= $SPACE | head -1`
  set TLONS = `$GENTG lat= $LAT lon= $LON grid= $GRID space= $SPACE | tail -1`
  set DLON = `echo "$LON $LONS[1]" | awk '{print $2-$1}'`
  @ LONQ = `echo $LON | awk -F. '{print $1}' | sed  -e "s/^0*//"`
  @ LDIF = $LONQ - $LONC
  @ CR = $CROT
  if ($LDIF > 180) then
    @ LDIF -= 360
    @ CR++
    set DLON = `echo $DLON | awk '{print $1+360.0}'`
  endif
  if ($LDIF < -180) then
    @ LDIF += 360
    @ CR--
    set DLON = `echo $DLON | awk '{print $1-360.0}'`
  endif
  set OFF = `printf %+05.1f $DLON`
  set RGNID = $AR$OFF
  if ($?RGNLIST) then
    set RGNLIST = $RGNLIST,$RGNID
    set RGNS = ($RGNS $RGNID)
  else
    set RGNLIST = $RGNID
    set RGNS = $RGNID
  endif

  @ RGNCT = $#TLATS
  @ TOTCT += $RGNCT
  unset LATLIST
  @ RGN = 0
  while ($RGN < $RGNCT)
    @ RGN++
    set TLAT = $TLATS[$RGN]
    set TLON = $TLONS[$RGN]
    if ($?LATLIST) then
      set LATLIST = $LATLIST,$TLAT
      set LONLIST = $LONLIST,$TLON
    else
      set LATLIST = $TLAT
      set LONLIST = $TLON
    endif
  end
  set TMID = $CR\:$LON

# check for background average
  @ CR60 = $CR
  if ($LONQ > 330) then
    @ CL60 = 360
  else if ($LONQ > 270) then
    @ CL60 = 300
  else if ($LONQ > 210) then
    @ CL60 = 240
  else if ($LONQ > 150) then
    @ CL60 = 180
  else if ($LONQ > 90) then
    @ CL60 = 120
  else if ($LONQ > 30) then
    @ CL60 = 60
  else
    @ CR60++
    @ CL60 = 360
  endif
  set BCK = $BCKG"[$CR60][$CL60]"
  @ BCKCT = `show_info -c ds= "$BCK" | awk '{print $1}'`
  if ($BCKCT < 1) then
    echo "Warning: Data average record $BCK does not exist"  >> $MMSG
    echo "         Background subtraction skipped"  >> $MMSG
    set BCK = "Not Specified"
  endif

  $LSMAI ds= $MSER cr= $CROT cl= $LON \
      scale= $MSCALE extent= $MSIZE interval= 30 \
      lat= "{$LATLIST}" lon= "{$LONLIST}" > $MLIST
  set MAIS = (`head -1 $MLIST`)
  if ($#MAIS < 1) then
    set MAILIST = NaN
  else if ("$MAIS[1]" =~ "<2") then
    set MAILIST = NaN
  else
    set MAIS = `head -1 $MLIST`
    set MAILIST = $MAIS[1]
    @ N = 1
    while ($N < $#MAIS)
      @ N++
      set MAILIST = "$MAILIST, $MAIS[$N]"
    end
  endif
  if (-e $MLIST) rm $MLIST

  @ BEGUN = `date +%s`
  $TRACK out= $TSER in= $ISER tmid= $TMID length= $LNGTH \
    bckgn= "$BCK" ident= $RGNID qmask= $QMASK reject= $RJCT \
    map= Postel scale= $SCALE cols= $SIZE rows= $SIZE \
    tobs_key= T_REC \
    lat= "{$LATLIST}" lon= "{$LONLIST}" mai= "{$MAILIST}" >>& $RLOG
  if ($status) then
    set SUBJ = "HMI ring-diagram $TW processing for AR $AR incomplete"
    echo "  tracking failure on `hostname`" >> $MMSG
    echo "  run log is on $RLOG" >> $MMSG
    echo "  tracking failure on `hostname` for AR $AR"  >> $LOGF
    goto CLEANUP
  else
    @ FINIS = `date +%s`
    @ ELAPS = $FINIS - $BEGUN
    @ TOTEL += $ELAPS
    @ ELAPS += 30
    @ ELAPS /= 60
    echo "  ($AR) time for tracking $RGNCT regions on `hostname`: $ELAPS min" >> $LOGF
  endif
  @ BEGUN = $FINIS
end

@ TOTEL += 30
@ TOTEL /= 60
echo "  total time for tracking $TOTCT regions on `hostname`: $TOTEL min" >> $MMSG
echo "    tracked data in $TSER""[$$RGNLIST]" >> $MMSG
echo "  ($AR) total time for tracking $TOTCT regions on `hostname`: $TOTEL min" >> $LOGF

@ RGNCT = `show_info -cq ds= $TSER"[$RGNLIST]"`
@ BEGUN = `date +%s`
$PSPEC pspec= $PSER in= $TSER"[$RGNLIST]" mask_in= $APODE >>& $RLOG
if ($status) then
  set SUBJ = "HMI ring-diagram $TW processing for AR $AR incomplete"
  echo "  pspec failure on `hostname`"  >> $MMSG
  echo "  run log is on $RLOG"  >> $MMSG
  echo "  pspec failure on `hostname` for AR $AR"  >> $LOGF
  goto CLEANUP
else
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ ELAPS += 30
  @ ELAPS /= 60
  echo "  time for $RGNCT power spectra on `hostname`: $ELAPS min" >> $MMSG
  echo "    spectra in $PSER""[$RGNLIST]" >> $MMSG
  echo "  ($AR) time for $RGNCT power spectra on `hostname`: $ELAPS min" >> $LOGF
endif

SKIP_PSPEC:

set noglob
set RECS = (`show_info -iq ds= $PSER"[$RGNLIST]"`)
unset noglob
@ EXPCT = $#RECS
set FILEN = rfc_$AR
set SCRIPT = $TMPD/$FILEN
echo "#\!/bin/csh -f" > $SCRIPT
echo "limit vm $VMEM"M >> $SCRIPT
echo set noglob >> $SCRIPT
echo 'set RECS =  ('"$RECS"')' >> $SCRIPT
echo 'set REC = $RECS[$SGE_TASK_ID]' >> $SCRIPT
echo "$RFITC \" >> $SCRIPT
echo "  out= $CSER \" >> $SCRIPT
echo "  guessfile= $GUESSFIL \" >> $SCRIPT
echo '  in= "$REC" >>&' $RLOG >> $SCRIPT
chmod +x $SCRIPT
@ BEGUN = `date +%s`
qsub -sync yes -t 1-$EXPCT -q j.q $SCRIPT >>& $RLOG
@ QJOK = `grep "exited with exit code 0." $RLOG | wc -l`
@ FAIL = $EXPCT - $QJOK
if ($FAIL) then
  goto CLEANUP
endif
@ FINIS = `date +%s`
@ ELAPS = $FINIS - $BEGUN
@ ELAPS += 30
@ ELAPS /= 60
echo "  time for fitting $RGNCT regions on the cluster: $ELAPS min" >> $MMSG
echo "  ($AR) time for fitting $RGNCT regions on the cluster: $ELAPS min" >> $LOGF
echo "    fits in $CSER""[$RGNLIST]" >> $MMSG

SKIP:
# $RFITC out= $CSER guessfile= $GUESSFIL in= $PSER"[$RGNLIST]" &
# echo "  ($AR) ring fitting submitted" >> $LOGF

CLEANUP:
set NOW = `date +%Y.%m.%d_%T`
set NOTIFY = `grep ^$TYPE $NOTE | awk '{print $2}'`
if ($#NOTIFY) then
  echo "$NOW finish AR $AR" >> $MMSG
  echo $SUBJ > $MSGS/subj.$PROCID
  echo "$NOTIFY" > $MSGS/list.$PROCID
endif
echo "$NOW finish AR $AR" >> $LOGF
