#!/bin/csh -f
# script to run tracking and ring-diagram analyses on HMI Dopplergrams

@ TEST = 0	# set to 1 for production in namespace hmi_test
if ("$1" =~ '-test') then
  @ TEST = 1
  shift
endif

if ($#argv < 1) then
  echo "usage: $0 [-test] AR [CR:CL LAT QLON-1 [QLON-2]]"
  exit
endif
@ AR = `echo $1 | sed  -e "s/^0*//"`

# modules and programs
set LSMAI = maicalc
set TRACK = mtrack_v11
set PSPEC = pspec3_v10
set RFITC = rdfitc_v11
# set RFITC = ~/tmp/rdfitc

#  check that required modules and programs are in path or rooted
# foreach CMD ($LSMAI $TRACK $PSPEC $RFITC)
foreach CMD ($TRACK $PSPEC $RFITC)
  which $CMD > /dev/null
  if ($status) then
    if (!(-x $CMD)) then
      echo Error: command $CMD not in path\; script will fail
      exit
    endif
  endif
end

#  append flags to commands as applicable
set TRACK = "$TRACK -cov"
set PSPEC = "$PSPEC -v"

# base naming convention for I/O series and logs
if ($TEST) then
  set NMSP = hmi_test
  set OBS = V2
  set MOBS = M2
else
  set NMSP = hmi
  set OBS = V
  set MOBS = M
endif
set BASE = rd$OBS
set SUFX = _targ

# input series
set ISER = $NMSP.$OBS\_45s
set NOAA = su_rsb.NOAA_ActiveRegions
set MSER = $NMSP.$MOBS\_45s
# set MSER = mdi.fd_M_96m_lev18
set BCKG = $NMSP.$OBS\_avg120
set GUESS = yale_cb.guess_table"[1]"
set GUESSDIR = `show_info -pq ds= "$GUESS"`
set GUESSNAM = `/bin/ls $GUESSDIR | awk '{print $1}'`
set GUESSFIL = $GUESSDIR/$GUESSNAM

# output series
set TSER = $NMSP.$BASE\track$SUFX
set PSER = $NMSP.$BASE\pspec$SUFX
set CSER = $NMSP.$BASE\fitsc$SUFX

# parameters
@ SIZE = 384
set SCALE = 0.04
@ LNGTH = 4608
set QMASK = 0x80004000
set APODE = 0.9765625

set ARID = (11057 11057 11057 11058 11058 11058 11059)
set LATS = (+15.0 +15.0 +15.0 +25.0 +40.0 +10.0 -22.5)
set LONS = (322.5 307.5 337.5 015.0 015.0 015.0 265.0)
set CRS =  (2095  2095  2095  2094  2094  2094  2095)
set ARID = (0)
set ARID =  (11057      11072      11076    11081)
set LATS =  (+15.0      -15        -19      +24)
set CRCLS = (2095:322.5 2097:315.5 2097:195 2097:100)
set QLNES = ( 45         45         45       45)
set QLNWS = (-45        -45        -45      -45)

if ($#argv > 1) then
  if ($#argv < 4) then
    echo "usage: $0 AR [CR:CL LAT Q0LON [Q1LON]]"
    exit
  endif
  set CRCL = $2
  set LON = `echo $CRCL | awk -F: '{print $2}'`
  set LAT = $3
  @ QLNE = `echo $4 | sed  -e "s/^0*//"`
  @ QLNW = $QLNE
  if ($#argv > 4) @ QLNW = `echo $5 | sed  -e "s/^0*//"`
else
  @ NAR = 1
  while ($NAR <= $#ARID)
    if ($AR == $ARID[$NAR]) break
    @ NAR++
  end
  if ($NAR > $#ARID) then
    echo No tabulated values for $AR\; suggested values:
    set DATES = `show_info -q ds= $NOAA"[][$AR]" key= ObservationTime`
    @ NCT = $#DATES / 2
    if ($NCT < 1) @ NCT++
    set CRS = `sunephem $DATES[$NCT] | tail -n 1 | awk '{print $7}' | awk -F. '{print $1}'`
    echo CR: $CRS
    echo "Lat	LonHG	(LonCM)	(Area)"
    show_info -q ds= $NOAA"[][$AR]" key= LatitudeHG,LongitudeHG,LongitudeCM,Area
    exit
  else
    set CRCL = $CRCLS[$NAR]
    set LAT = $LATS[$NAR]
    set LON = `echo $CRCL | awk -F: '{print $2}'`
    @ QLNE = $QLNES[$NAR]
    @ QLNW = $QLNWS[$NAR]
  endif
endif
@ CROT = `echo $CRCL | awk -F: '{print $1}'`

@ LONC = `echo $LON | awk -F. '{print $1}' | sed  -e "s/^0*//"`
set FR = `echo $LON | awk -F. '{print $2}'`

goto SKIPMAI
# determine MAI's for candidate regions (not working)
@ OFF = 120
while ($OFF >= -120)
  @ CR = $CROT
  @ LON = $LONC + $OFF
  if ($LON > 360) then
    @ LON -= 360
    @ CR--
  endif
  if ($LON <= 0) then
    @ LON += 360
    @ CR++
  endif
  set LNT = $LON.$FR
  echo -n `printf %+d $OFF` $CR\:$LNT
  $LSMAI ds= $MSER cr= $CR cl= $LNT \
      scale= $SCALE extent= $SIZE interval= 30 \
      lat= $LAT lon= $LNT # > $MLIST
  @ OFF -= 15
end

SKIPMAI:

set LONS = (0 $QLNE $QLNW)
if ($QLNE == $QLNW) set LONS = (0 $QLNE)
foreach OFF ($LONS)
  @ LON = $LONC + $OFF
  if ($OFF) then
    set RGNID = $AR`printf %+02d $OFF`
    @ CR = $CROT
    if ($LON > 360) then
      @ LON -= 360
      @ CR--
    endif
    if ($LON <= 0) then
      @ LON += 360
      @ CR++
    endif
    set TMID = $CR\:$LON.$FR
  else
    set RGNID = $AR
    set TMID = $CRCL
  endif
  $TRACK out= $TSER in= $ISER tmid= $TMID length= $LNGTH \
    ident= $RGNID qmask= $QMASK \
    scale= $SCALE cols= $SIZE rows= $SIZE \
    lat= $LAT lon= $LON.$FR
  if ($status) then
    echo "  tracking failure on `hostname`"
    exit 1
  else
    @ FINIS = `date +%s`
    @ ELAPS = $FINIS - $BEGUN
    @ ELAPS /= 60
    echo "  time for tracking $RGNCT regions on `hostname`: $ELAPS min"
  endif
  @ BEGUN = $FINIS

SKIP_TRACK:

  $PSPEC pspec= $PSER in= $TSER"[$RGNID]" mask_in= $APODE
  if ($status) @ PFAIL = $RGNCT
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ ELAPS /= 60
  echo "  time for $RGNCT spectra: $ELAPS min"

SKIP_PSPEC:

  $RFITC out= $CSER guessfile= $GUESSFIL in= $PSER"[$RGNID]" &
end
exit

$TRACK out= $TSER in= $ISER tmid=  $TMID length= $LNGTH \
  max_miss= 10000000 \
  scale= $SCALE cols= $SIZE rows= $SIZE \
  lat= "{$LATLIST}" lon= "{$LONLIST}"
$PSPEC pspec= $PSER in= $TSER"[$CROT][$CLON]"

@ RGN = 0
set QIDS
while ($RGN < $RGNCT)
  @ RGN++
  set LON = $LONS[$RGN]
  set LAT = $LATS[$RGN]
  set FILE = `echo $CARTIM | tr ':' '.'`
  set FILEN = rfc$FILE\_$LON\_$LAT
  set SCRIPT = $QDIR/$FILEN
  echo "#\!/bin/csh -f" > $SCRIPT
  echo "$RDFIT \" >> $SCRIPT
  echo "  in=  "'"'"$PSER""[$CROT][$CLON][$LON][$LAT]"'" \' >> $SCRIPT
  echo "  out= $CSER" >> $SCRIPT
  chmod +x $SCRIPT
  qsub -q j.q $SCRIPT > /tmp/qinfo.$$.$RGN
  set QID = `cat /tmp/qinfo.$$.$RGN | awk '{print $3}'`
  set QIDS = ($QIDS $QID)
end
