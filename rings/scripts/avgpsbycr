#!/bin/csh -f
# Create averages of hmi.rdv_pspec_fd* power spectra over a rotation by
#   Stonyhurst coordinates (cf. avgpscrsyn)

@ TEST = 0	# set to 1 for production in namespace hmi_test
set TW
if ("$1" =~ '-test') then
  @ TEST = 1
  set TW = test
  shift
endif

if ($#argv < 2) then
  echo "usage: $0 [-test] Size CarRot"
  exit
endif

@ SYSER = `echo $1 | sed  -e "s/^0*//"`
@ CROT = `echo $2 | sed  -e "s/^0*//"`

# modules, programs, and scripts
set DATAVG = datavg
set QSUB = qsub2

set QUEUE = k.q

# base naming convention for I/O series and logs
set INMSP = hmi
if ($TEST) then
  set TSTOPT = ~rick/hmi/rings/testoptions
  if (!(-r $TSTOPT)) then
    echo Error: unable to read file $TSTOPT for test options
    exit
  endif
  set ONMSP = hmi_test
# parse testoptions file for possible substitution of modules
  grep -q "^DATAVG =" $TSTOPT
  if ($status == 0) set DATAVG = `grep "^DATAVG =" $TSTOPT | awk '{print $3}'`
  grep -q "^QSUB =" $TSTOPT
  if ($status == 0) set QSUB = `grep "^QSUB =" $TSTOPT | awk '{print $3}'`
else
  set ONMSP = hmi
endif

#  check that required scripts and programs are in path or rooted
foreach CMD ($DATAVG)
  which $CMD > /dev/null
  if ($status) then
    if (!(-x $CMD)) then
      echo Error: command $CMD not in path\; script will fail
      exit
    endif
  endif
end

# add flags
set DATAVG = "$DATAVG -v"

# select from synoptic series
set TILESS = (  05    15    30)
# set VMEMS =  ( 250  5200 10000)
set VMEMS =  ( 250  4000 8000)
# New VMEM limits assume no power map output with datavg v 1.5+
# set PCMDS =  ( ""  "" "-pe smp 2")
# PCMD should be set for dual if max number of jobs on one node * max vmem
#   would exceed 120 GB; max number of jobs on one node is either 24, or 12
#   if smp 2 invoked; but max number of jobs from this script is 9 for 30 deg
#   or 21 for 15 deg

@ NT = 1
while ($NT <= $#TILESS)
  set TILES = $TILESS[$NT]
  @ SYSE = `echo $TILES | sed  -e "s/^0*//"`
  if ($SYSER == $SYSE) break
  @ NT++
end
if ($NT > $#TILESS) then
  echo "usage: $0 Size CR"
  echo "       Size must be one of: $TILESS"
  exit
endif

# base naming convention for I/O series and logs
set BASE = rdV
set TILES = $TILESS[$NT]
set SUFX = _fd$TILES
set PLID = hmi$BASE

# input series
set PSER = $INMSP.$BASE\pspec$SUFX

# output series
set AVGS = $ONMSP.$BASE\avgpspec$SUFX

#  check that input and product series exist
foreach SER ($PSER $AVGS)
  show_info -j ds= $SER >& /dev/null
  if ($status) then
    echo Error: series $SER does not exist\; script will fail
    exit
  endif
end

# parameters
set MSCALE = 0.0005
set MZERO = -11.5
# set PSCALE = 0.00025
# set PZERO = -23.0
@ VMEM = $VMEMS[$NT]
# set PCMD = "$PCMDS[$NT]"

# auxiliary files
set HOSTID = `hostname | awk -F. '{print $1}'`
set PROCID = $HOSTID\_$$
set NOTE = ~rick/rings/notify
set TMPFSLOC = ~rick/hmi/tmpfs
set TMPARSE = ~rick/bin/tmplocs
set ALTDIR = ~rick/hmi
if (-x $TMPARSE) then
  set XXLOCS = (`$TMPARSE $TMPFSLOC $ALTDIR`)
  set TEMP = $XXLOCS[1]
  set SCRT = $XXLOCS[2]
else
  set TEMP = /tmp
  set SCRT = /tmp
endif
set SCRB = $SCRT/rdVavgps$TILES
if ($TEST) set SCRB = $SCRB.$TW
if (!(-d $SCRB)) mkdir $SCRB
set LOGF = $SCRB/runlog.avgpsbycr
set TMPB = $TEMP/rdVavgps$TILES
if ($TEST) set TMPB = $TMPB.$TW
if (!(-d $TMPB)) mkdir $TMPB
set MSGS = $TEMP/msgs
if (!(-d $MSGS)) mkdir $MSGS
set MMSG = $MSGS/msg.$PROCID
set RLOG = $TMPB/$CROT
if (-e $RLOG)  mv $RLOG $RLOG.bck
set TMPD = $TMPB/scripts
if (!(-d $TMPD)) mkdir $TMPD
set QRES = $TEMP/qres
if (!(-d $QRES)) mkdir $QRES

set TYPE = misc

# set up logging, notification
set NOW = `date +%Y.%m.%d_%T`
set SUBJ = "power spectrum $TW averaging for $CROT"
echo "$NOW begin $TW averaging CR $CROT fd$TILES" > $MMSG
cat $MMSG >> $LOGF

if (-e $RLOG)  then
  rm $RLOG.*
  mv $RLOG $RLOG.bck
endif
touch $RLOG

# prepare scripts for batch processing
set FILEN = rdVavgps$TILES.$CROT
set SCRIPT = $TMPD/$FILEN

set LON0 = `show_info -q ds= $PSER"[$CROT][][][0][0]" key= CMLon | head -1`
set LON1 = `show_info -q ds= $PSER"[$CROT][][][0][0]" key= CMLon | tail -1`

set TLATS = (`show_info -q ds= $PSER"[$CROT][$LON0,$LON1][][][0]" key= LatHG | sort -u`)

@ TOTEL = 0
@ TOTCT = 0
foreach TLAT ($TLATS)
  @ LONCT0 = `show_info -cq ds= $PSER"[$CROT][$LON0][][$TLAT][0]"`
  @ LONCT1 = `show_info -cq ds= $PSER"[$CROT][$LON1][][$TLAT][0]"`
  @ LONCT = $LONCT0
  if ($LONCT1 > $LONCT) @ LONCT = $LONCT1
  if ($LONCT == 0) continue
  set noglob
  set LONS = (`show_info -q ds= $PSER"[$CROT][180][][$TLAT][]" key= LonCM`)
  unset noglob
  @ EXPCT = $#LONS
  @ QJOK = `grep "exited with exit code 0." $RLOG | wc -l`
  @ TOTCT = $QJOK + $EXPCT
  echo "#\!/bin/csh -f" > $SCRIPT
  echo "limit vm $VMEM"M >> $SCRIPT
  echo set noglob >> $SCRIPT
  echo 'set LONS =  ('"$LONS"')' >> $SCRIPT
  echo 'set LON = $LONS[$SGE_TASK_ID]' >> $SCRIPT
  echo 'set LOG = '$RLOG'.$SGE_TASK_ID.'$TLAT >> $SCRIPT
  echo "$DATAVG \" >> $SCRIPT
  echo "  out= $AVGS mean= logP \" >> $SCRIPT
  echo "  pkey= CMLon \" >> $SCRIPT
  echo "  mscale= $MSCALE mzero= $MZERO \" >> $SCRIPT
  echo '  copy= "CarrRot,LatHG,LonCM,DELTA_K,DELTA_NU,D_OMEGA,Apode_f,APOD_MIN,APOD_MAX" \' >> $SCRIPT
  echo '  in= '$PSER'"['$CROT'][][]['$TLAT'][$LON]" >>& $LOG' >> $SCRIPT
  @ BEGUN = `date +%s`
#  $QSUB $PCMD -sync yes -t 1-$EXPCT -q $QUEUE -e $QRES -o $QRES $SCRIPT >>& $RLOG
  $QSUB -sync yes -t 1-$EXPCT -q $QUEUE -e $QRES -o $QRES $SCRIPT >>& $RLOG
  @ QJOK = `grep "exited with exit code 0." $RLOG | wc -l`
  @ FAIL = $TOTCT - $QJOK
  if ($FAIL) then
    echo "  $FAIL averaging failures on cluster at Latitude `printf %+05.1f $TLAT`" >> $MMSG
    echo "  ($CROT) $FAIL averaging failures on cluster at Latitude `printf %+05.1f $TLAT`" >> $LOGF
    set QID = `grep "exited with exit code" $RLOG | awk '{print $2}' | awk -F. '{print $1}' | sort -u`
    set PROG = `basename $SCRIPT`
    set ERRLOG = $QRES/$PROG.e$QID
    set noglob
    echo "  stderr from module failures in $ERRLOG.*" >> $MMSG
    unset noglob
    set JOBID = `grep "Your job-array" $RLOG | awk '{print $3}' | awk -F. '{print $1}'`
    echo "  For details, qacct[2] -j $JOBID" >> $MMSG
  endif
  @ FINIS = `date +%s`
  @ ELAPS = $FINIS - $BEGUN
  @ TOTEL += $ELAPS
  @ ELAPS += 30
  @ ELAPS /= 60
  echo "  time for averaging $EXPCT sets of spectra on the cluster: $ELAPS min" >> $MMSG
end
@ TOTEL += 30
@ TOTEL /= 60
echo "Total time for averaging $TOTCT sets of spectra on the cluster: $TOTEL min" >> $MMSG
echo "    averaged spectra in $AVGS""[$CROT]" >> $MMSG

CLEANUP:
set NOW = `date +%Y.%m.%d_%T`
set NOTIFY = `grep ^$TYPE $NOTE | awk '{print $2}'`
if ($#NOTIFY) then
  echo $SUBJ > $MSGS/subj.$PROCID
  echo "$NOTIFY" > $MSGS/list.$PROCID
endif
echo "$NOW finish $TW averaging CR $CROT fd$TILES" >> $LOGF
