This directory contains support (include) files for exportdata.html for
specific code for processing and protocol options.

HELP

The Help responses for processing and protocol options are also here,
in the "addOnTips.js" file.  Create help messages as needed linked
to the id of the span containing the help symbol, presently a "?".

PROCESSING

Code for processing options is placed in the "processing.js" file.
Each type of processing is required to have at least three functions,
named XxxxInit, XxxxCheck, XxxxSet, where Xxxx is a name for the
option.  E.g.  for the jsoc_rebin module the functions are
named "RebinInit", "RebinCheck", and "RebinSet".  Additionally two
id names must be provided.  One for the checkbox that selects the
option and one for the table row that contains all tjhe html code
to support the processing option.  See e.g. exportdata.html for
the html section for Rebin processing.

In addition to the three functions and two names, lines must be
added to the "ProcessingInit" function located at the end of the
processing.js file.  There are 11 lines needed for each processing type:
>   iOpt++;
>   ProcessingOptionsHTML +=
>     '<input type="checkbox" checked="false" value="rebin" id="OptionRebin" onChange="SetProcessing('+iOpt+');" /> ' +
>     'rebin - Rebin with boxcar or gaussian smoothing<br>';
>   ExpOpt = new Object();
>   ExpOpt.id = "OptionRebin";
>   ExpOpt.rowid = "ProcessRebin";
>   ExpOpt.Init = RebinInit;
>   ExpOpt.Check = RebinCheck;
>   ExpOpt.Set = RebinSet;
>   ExportProcessingOptions[iOpt] = ExpOpt;

iOpt is the counter and index for processing options.
ProcessingOptionsHTML is the code for an input checkbox used to select the option.
This code is added to the exportdata.html code by placing it into a "span".
There is an array of objects to manage the options.  Each type has
an object containing id, rowid, Init, Check, and Set properties/methods.

PROTOCOLS

xxxx

HTML

The html code for the processing options, and protocol options, must be included in the
exportdata.html file itself.  Only changes to the "body" section of this file are needed
for new processing options.  These additions are contained in a single table row for
each processing option.  Whatever code is desired can be in that row, but for style
the first few lines should follow the existing structure.

MANAGING DEVELOPMENT VERSIONS

/web/jsoc/htdocs/ajax/exportdata.html should be a link to the CVS managed directory in use.
The plan is to have exportdata.html point into the ~jsoc/cvs/Development" tree.
In addition to exportdata.html there MUST be a link to the support directory,
exportdata.d.  the link name must be the same as the main html file but with no extension.
I.e. the pair exportdata.html and exportdata/ must both have the same basename.
Also note that the names in /web/.../ajax/ may be anything but the names in
the Development directory should be "exportdata.html" and "exportdata.d/".

The exportdata directory should point to the directory where the actual exportdata.html
file resides.  That directory MUST contain a subdirectory named exportdata.d.
NOTE this subdir must be named "exportdata.d" even for test versions where the
basename is not "exportdata".  E.g. Phil uses "exportdata2.html" and "exportdata2/" to
support development of the code, which is located in ~phil/jsoc/proj/export/webapps"
Note that by placing a development version of exportdata.html in ANY target
directory, and making the two links from /web/jsoc/htdocs/ajax/ to that test
directory and its exportdata.html code, AND in that directory placing a directory
named "exportdata.d" containing the three support files described above, independent
development can proceed.

When changes are fully tested, and ready for release, simply do a cvs commit in the
your development directory, then in ~jsoc/cvs/Development/JSOC/proj/export/webapps/"
do a cvs update to install the new code.
NO other changes are needed, unless test versions of the cgi-bin program are defined
in the test code, in which case those should be replaced with the released versions
prior to cvs commit.

This method of development without internal code changes is enabled by the code at
the start of exportdata.html containing:
> <script type="text/javascript">
> // Global variables and initialize page locations
> var exportdata = location.pathname.sub(".html","");
> </script>
> <script type="text/javascript">
> document.write('<base id="basepath" href="'+exportdata+'/"><\/base>');
> </script>

NOTE also that any relative paths to href or img src files should have copies
of those files in the development directory which will be the "base" directory.

As soon as the switch is made to the new exportdata code using this method,
presently in exportdata2, ~phil/.../webapps/ will have all old and test versions
removed or moved to an "old" directory.  (PHS 8 July 2012)


