#!/usr/bin/perl -w
#
# time_lag_monitor.pl
#
#
# This script uses show_info to get the DATE value of the latest record of a series.
# The time_lag is monitorred regularly to see to make sure they are within limits.
# If show_info fails multiple times or the time_lag is out of range, an alert message will be sent.
#
# Parameters:
#
# ds_names              : List of series to be monitored.
# check_interval        : How often this script calls show_info.
# time_lag_limit        : How far time_lag could be before sending a notify.
# show_info_fails_limit : How many time in a row show_info fails before sending a notify.
# alert_interval        : How often alert message can be sent.
# sendto                : Whom will receive the alert.
#                       : ie: "jim\@sun.stanford.edu, timh\@sun.stanford.edu, 4083481970\@txt.att.net";
# log_filename          : "" for not logging
#                       : ie: "/tmp02/timh/time_log_monitor.log"
#
# Note: all time are in minutes.
#
#-------------------------------------------------------------------------------------------------

use strict;
use warnings;

my $DEBUG_MESSAGES_ON  = 1;



#----------------------------
# CURRENT SETTINGS:

my @ds_names                = ("hmi.lev0c", "aia.lev0c");
my $check_interval          = 6; # 6 in minutes. How often this script calls show_info.
my $time_lag_limit          = 14;# 14 in minutes. How far time_lag could be before sending a notify.
my $show_info_fails_limit   = 3; # 3 times. How many times show_info fails in consecutive before sending a notify.
my $alert_interval          = 120; # 120 in minute. How often alert message can be sent.
my $sendto                  = "jim\@sun.stanford.edu, timh\@sun.stanford.edu";
my $log_filename            = "/tmp02/timh/time_lag_monitor.log"; # "" for not logging

#----------------------------



    
TimeLagMonitor(@ds_names); # main loop.


exit;


#-------------------------------------------------------------------------------------------------
# For Testing and Reuse:
#
# PrintTimeLags("hmi.lev0c");
# SendEmail("timh\@sun.stanford.edu","time_lag_monitor-host@sun.stanford.edu","Something fails.","Please Check!");
# Mail("timh\@sun.stanford.edu,4083481979\@txt.att.net","Something fails. Please Check!");
# Simulated TimeString Test
# print GetTimeDiff("2008-01-01T00:00:00Z", "2008-07-09T02:19:59Z");
#

#-------------------------------------------------------------------------------------------------
# TimeLagMonitor(@ds_names) 
#
# This is the MAIN LOOP, runnning until Ctrl-C.
# Given a list of ds_names, this script monitors the time_lag of each series name.
# If a time_lag exceeds the specified limit => Alert()
# If there are multiple show_info fails in a row => Alert()
#

sub TimeLagMonitor
{

    my (@ds_names) = @_;
    my ($series_name, $time_string, $current_time_string, $minutes, $time_lag_hours, $time_lag_minutes);
    my ($error_message, $time_message);
    my (%fail_record); # keep track how many fails for each series
    
    my $check_interval_in_seconds = $check_interval * 60;
    my $last_alert_time_string  = "2000-01-01T00:00:00Z";
  

    if($log_filename ne "")
    {
	open (LOG_FILE,">$log_filename") || die "Can't Open : $log_filename $!\n";
	DebugMessage("# generated by time_lag_monitor.pl at ". GetTimeString()."\n");
    }

    PrintCurrentSettings();

    # Display field names and init fail_record
    DebugMessage("# Current Time (GMT)");
    foreach $series_name (@ds_names)
    {
	DebugMessage(sprintf("%14s",$series_name));
	$fail_record{$series_name} = 0; # init fail counts
    }
    DebugMessage("\n");



    while(1) # MAIN LOOP
    {

	$error_message = "";
	$time_message  = "";

	$current_time_string = GetTimeString();
	$time_message = $current_time_string;

	foreach $series_name (@ds_names)
	{

	    $time_string = GetLatestDATE($series_name);

	    if ($time_string) # success getting time_string from series
	    {
		$minutes = GetMinuteDiff($time_string, $current_time_string);

		$time_lag_hours   = int ($minutes / 60);
		$time_lag_minutes = int ($minutes % 60);

		if($minutes > $time_lag_limit) # time_lag exceeds the limit
		{
		    $time_message  .= sprintf("      %02dh %02dm*",$time_lag_hours, $time_lag_minutes );
		    $error_message = "[lag] ";

		}
		else
		{
		    $time_message  .= sprintf("      %02dh %02dm ",$time_lag_hours, $time_lag_minutes );
		}

		$fail_record{$series_name}  = 0; # when got a time_string, reset fail_record counter

	    }
	    else # fail getting time_string 
	    {
		$time_message .= "             ";

		$fail_record{$series_name} ++;

		if($fail_record{$series_name} > $show_info_fails_limit) # multiple fails in a row, send alert
		{
		    $error_message = "[fail:$fail_record{$series_name}] ";
		}
	    }
	}
	

	if(length($error_message) != 0)
	{
	    if(GetMinuteDiff($last_alert_time_string, $current_time_string) > $alert_interval)
            {
		Alert("time_lag_monitor => ".$error_message. $time_message);
		$last_alert_time_string = $current_time_string;
	    }
	}
	

	DebugMessage("$time_message\n");
	
	sleep($check_interval_in_seconds);

    }
    
    if($log_filename ne "")
    {
	close LOG_FILE;
    }

}

#-------------------------------------------------------------------------------------------------
# PrintCurrentSettings
#

sub PrintCurrentSettings
{

    DebugMessage("#-----------------------------------------------------------------------------\n");
    DebugMessage("# CURRENT SETTINGS:\n");
    DebugMessage("#   ds_names               = @ds_names\n");
    DebugMessage("#   check_interval         = $check_interval minutes\n");
    DebugMessage("#   lag_time_limit         = $time_lag_limit minutes\n");
    DebugMessage("#   show_info_fails_limit  = $show_info_fails_limit times\n");
    DebugMessage("#   alert_interval         = $alert_interval minutes\n");
    DebugMessage("#   send_to                = $sendto\n");
    DebugMessage("#   log_filename           = $log_filename\n");
    DebugMessage("#\n");
    DebugMessage("# (Hit Ctrl-C to terminate.)\n");
    DebugMessage("#-----------------------------------------------------------------------------\n");
    DebugMessage("#\n");
}

#-------------------------------------------------------------------------------------------------
# PrintTimeLags(@ds_names) of these series names
#
# ie: PrintTimeLags("hmi.lev0c","aia.lev0c");
#
# Time Lag:
# hmi.lev0c => 0 days 0 hours 0 minutes 43 seconds.
# aia.lev0c => 0 days 0 hours 1 minutes 11 seconds.
#

sub PrintTimeLags
{

    my (@ds_names) = @_;
    my ($series_name, $time_string, $current_time_string, $time_lag);

    print "\nTime Lag:\n";

    $current_time_string = GetTimeString();

    foreach $series_name (@ds_names)
    {
	$time_string = GetLatestDATE($series_name);

	print "$series_name = ". GetTimeDiff($time_string, $current_time_string). "\n";   

    }

    print "\n";

}

#-------------------------------------------------------------------------------------------------
# GetLatestDATE()
# 
# Use show_info to get the latest DATE value from the specified series.

sub GetLatestDATE
{
    my $ds_name = $_[0];

    my $command = "show_info '" . $ds_name . "[:\#\$]' -q key=DATE";
    my $date_string;

    open(COM,"$command |") || return undef; # || die "GetLatestDATE($ds_name) fails : $!";
    $date_string = <COM>;    
    close COM;


    $date_string =~s/^\s+//; # remove leading white spaces
    $date_string =~s/\s+$//; # remove trailing white spaces
    
    if(length($date_string) == 20) # should have this format 2008-07-10T16:24:09Z
    {
	return $date_string;
    }
    
    return undef;
    
}


#-------------------------------------------------------------------------------------
# GetTimeString() return (ie: 2008-06-10T14:30:00Z)

sub GetTimeString
{

    #@_ = localtime(time);
    @_ = gmtime(time);
    return(sprintf("%04d-%02d-%02dT%02d:%02d:%02dZ",$_[5]+1900,$_[4]+1,$_[3],$_[2],$_[1],$_[0]));

}

#-------------------------------------------------------------------------------------------------
# GetTimeDiff($time_string_1, $time_string_2)
#
# return ($dd, $hh, $mm, $ss)
#

sub GetTimeDiff
{

    my ($time_string_1, $time_string_2) = @_;

    unless($time_string_1 and $time_string_2) 
    { 
	return undef;
    }

    if((length($time_string_1) != 20) or (length($time_string_2) != 20)) 
    {
	return undef;
    }


    my @offset_days = qw(0 31 59 90 120 151 181 212 243 273 304 334);

    my $year1  = substr($time_string_1, 0, 4);
    my $month1 = substr($time_string_1, 5, 2);
    my $day1   = substr($time_string_1, 8, 2);
    my $hh1    = substr($time_string_1,11, 2);
    my $mm1    = substr($time_string_1,14, 2);
    my $ss1    = substr($time_string_1,17, 2);

    my $year2  = substr($time_string_2, 0, 4);
    my $month2 = substr($time_string_2, 5, 2);
    my $day2   = substr($time_string_2, 8, 2);
    my $hh2    = substr($time_string_2,11, 2);
    my $mm2    = substr($time_string_2,14, 2);
    my $ss2    = substr($time_string_2,17, 2);


    my $total_days1 = $offset_days[$month1 - 1] + $day1 + 365 * $year1;
    my $total_days2 = $offset_days[$month2 - 1] + $day2 + 365 * $year2;
    my $days_diff   = $total_days2 - $total_days1;

    my $seconds1 = $total_days1 * 86400 + $hh1 * 3600 + $mm1 * 60 + $ss1;
    my $seconds2 = $total_days2 * 86400 + $hh2 * 3600 + $mm2 * 60 + $ss2;

    my $ssDiff = $seconds2 - $seconds1;

    my $dd     = int($ssDiff / 86400);
    my $hh     = int($ssDiff /  3600) - $dd *    24;
    my $mm     = int($ssDiff /    60) - $dd *  1440 - $hh *   60;
    my $ss     = int($ssDiff /     1) - $dd * 86400 - $hh * 3600 - $mm * 60;


    #return "$dd days $hh hours $mm minutes $ss seconds.";

    return ($dd, $hh, $mm, $ss);

}

#-------------------------------------------------------------------------------------------------
# GetMinuteDiff($time_string_1, $time_string_2)
#
# return (ie: 129 (minutes))

sub GetMinuteDiff
{

    my ($time_string_1, $time_string_2) = @_;

    unless($time_string_1 and $time_string_2) 
    { 
	return undef;
    }

    if((length($time_string_1) != 20) or (length($time_string_2) != 20)) 
    {
	return undef;
    }


    my @offset_days = qw(0 31 59 90 120 151 181 212 243 273 304 334);

    my $year1  = substr($time_string_1, 0, 4);
    my $month1 = substr($time_string_1, 5, 2);
    my $day1   = substr($time_string_1, 8, 2);
    my $hh1    = substr($time_string_1,11, 2);
    my $mm1    = substr($time_string_1,14, 2);
    my $ss1    = substr($time_string_1,17, 2);

    my $year2  = substr($time_string_2, 0, 4);
    my $month2 = substr($time_string_2, 5, 2);
    my $day2   = substr($time_string_2, 8, 2);
    my $hh2    = substr($time_string_2,11, 2);
    my $mm2    = substr($time_string_2,14, 2);
    my $ss2    = substr($time_string_2,17, 2);


    my $total_days1 = $offset_days[$month1 - 1] + $day1 + 365 * $year1;
    my $total_days2 = $offset_days[$month2 - 1] + $day2 + 365 * $year2;
    my $days_diff   = $total_days2 - $total_days1;

    my $seconds1 = $total_days1 * 86400 + $hh1 * 3600 + $mm1 * 60 + $ss1;
    my $seconds2 = $total_days2 * 86400 + $hh2 * 3600 + $mm2 * 60 + $ss2;

    #my $ssDiff = $seconds2 - $seconds1;
    #my $dd     = int($ssDiff / 86400);
    #my $hh     = int($ssDiff /  3600) - $dd *    24;
    #my $mm     = int($ssDiff /    60) - $dd *  1440 - $hh *   60;
    #my $ss     = int($ssDiff /     1) - $dd * 86400 - $hh * 3600 - $mm * 60;

    my $minutes = int (($seconds2 - $seconds1 + 30) / 60);
    
    return $minutes;

}

#-------------------------------------------------------------------------------------------------
# DebugMessage($message)

sub DebugMessage
{
    if($DEBUG_MESSAGES_ON)
    {
        print $_[0];
    }

    if($log_filename ne "")
    {
	print LOG_FILE $_[0];
    }

}

#-------------------------------------------------------------------------------------------------
# sub Alert($message)

sub Alert
{
    my $message = $_[0];

    DebugMessage("\n$message\n\n");

    #SendEmail($sendto,"time_lag_monitor\@sun.stanford.edu",$message,"Please check Level 0 Processing. Thanks!");

    Mail($sendto, $message);

}

#-------------------------------------------------------------------------------------------------
# SendMail($to, $from, $subject, $message)
#
# Remember \ before @ in email address
#

sub SendMail
{
    my ($to, $from, $subject, $message) = @_;
    my $sendmail = '/usr/lib/sendmail';

    open(MAIL, "|$sendmail -oi -t");
    print MAIL "From: $from\n";
    print MAIL "To: $to\n";
    print MAIL "Subject: $subject\n\n";
    print MAIL "$message\n";

    close(MAIL);
}

#-------------------------------------------------------------------------------------------------
# Mail($to, $subject)
#
# Remember \ before @ in email address
# Used unix "mail" to send message to multiple users.
# From: user who ran the script
# Subject = subject. Message is one liner for display on phone.
# Message = $HOSTNAME (for now while testing... to see where the message is comming from)

sub Mail
{

    my ($to, $subject) = @_;
    my $command = 'echo "From: $HOSTNAME" | mail -s "' . $subject. '" "'. $to .'"' ;
    system($command) == 0 || die "Mail() fails. ";

}

#-------------------------------------------------------------------------------------------------

